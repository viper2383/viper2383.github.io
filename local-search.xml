<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>NSSCTF-Crypto（1~10）</title>
    <link href="/2023/09/07/NSSCTF-Crypto%EF%BC%881~10%EF%BC%89/"/>
    <url>/2023/09/07/NSSCTF-Crypto%EF%BC%881~10%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>《从0开始的密码学世界生活》😋慢慢学密码方向</p><p>有两个有各种加解密的网站</p><p><a href="http://www.hiencode.com/">在线工具</a></p><p><a href="https://ctf.bugku.com/tools">Bugku CTF</a></p><h2 id="鹤城杯-2021-easy-crypto"><a href="#鹤城杯-2021-easy-crypto" class="headerlink" title="[鹤城杯 2021]easy_crypto"></a>[鹤城杯 2021]easy_crypto</h2><p>解压后文件内容是社会主义核心价值观，查了一下竟然有<strong>核心价值观编码</strong>，有点逆天，那就直接用工具解码即可。</p><p>下面贴上两个网站</p><p><a href="http://www.hiencode.com/cvencode.html">核心价值观编码-加解密1</a></p><p><a href="https://ctf.bugku.com/tool/cvecode">核心价值观编码-加解密2</a></p><hr><h2 id="强网拟态-2021-拟态签到题"><a href="#强网拟态-2021-拟态签到题" class="headerlink" title="[强网拟态 2021]拟态签到题"></a>[强网拟态 2021]拟态签到题</h2><p>打开txt文件，发现看不懂，这什么东西？</p><p><a href="https://freeimage.host/i/J95ihaR"><img src="https://iili.io/J95ihaR.md.png" alt="2309061"></a></p><p>GPT一下</p><p><a href="https://freeimage.host/i/J9YVHSj"><img src="https://iili.io/J9YVHSj.md.png" alt="2309062"></a></p><p>GPT倒是一眼看出来了，base64编码，直接解码即可，仍然上面的两个网站任意一个即可</p><hr><h2 id="SWPUCTF-2021-新生赛-crypto8"><a href="#SWPUCTF-2021-新生赛-crypto8" class="headerlink" title="[SWPUCTF 2021 新生赛]crypto8"></a>[SWPUCTF 2021 新生赛]crypto8</h2><p>打开txt后又是一段乱码：73E-30U1&amp;&gt;V-H965S95]I&lt;U]P;W&#x3D;E&lt;GT&#96;</p><p>根据题目上面的标签提示，推测是UUencode加密</p><p>用工具解密即可</p><p>NSSCTF{cheese_is_power}</p><blockquote><p><strong>有个小问题哈，这些编码的具体实现方式我们不用具体了解吗难道🤔🤔🤔🤔🤔🤔🤔🤔🤔🤔🤔🤔，直接用工具就行了吗？</strong></p></blockquote><hr><h2 id="SWPUCTF-2021-新生赛-crypto7"><a href="#SWPUCTF-2021-新生赛-crypto7" class="headerlink" title="[SWPUCTF 2021 新生赛]crypto7"></a>[SWPUCTF 2021 新生赛]crypto7</h2><p>打开txt，原文如下</p><p><code>69f7906323b4f7d1e4e972acf4abfbfc,得到的结果用NSSCTF&#123;&#125;包裹。</code></p><p>根据标签，发现是MD5加密</p><p>直接解密即可，<a href="https://www.cmd5.com/">MD5解密</a></p><p>NSSCTF{md5yyds}</p><hr><h2 id="SWPUCTF-2021-新生赛-crypto6"><a href="#SWPUCTF-2021-新生赛-crypto6" class="headerlink" title="[SWPUCTF 2021 新生赛]crypto6"></a>[SWPUCTF 2021 新生赛]crypto6</h2><p>打开txt，原文如下</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">var=<span class="hljs-string">&quot;************************************&quot;</span><br>flag=<span class="hljs-string">&#x27;NSSCTF&#123;&#x27;</span> + base64<span class="hljs-selector-class">.b16encode</span>(base64<span class="hljs-selector-class">.b32encode</span>(base64<span class="hljs-selector-class">.b64encode</span>(<span class="hljs-selector-tag">var</span><span class="hljs-selector-class">.encode</span>()))) + <span class="hljs-string">&#x27;&#125;&#x27;</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(flag)</span></span><br><br>小明不小心泄露了源码，输出结果为：<span class="hljs-number">4</span>A5A4C564B36434E4B5241544B5432454E4E32465552324E47424758534D44594C4657564336534D4B5241584F574C4B4B463245365643424F35485649534C584A5A56454B4D4B5049354E47593D3D3D，你能还原出var的正确结果吗？<br></code></pre></td></tr></table></figure><ul><li>可以看出加密是先base64，再base32，再base16</li><li>所以解密我们就先反过来即可，16 → 32 → 64，用上面的解密网站</li><li>得到5e110989-dc43-1bd3-00b4-9009206158fe</li><li>所以flag为NSSCTF{5e110989-dc43-1bd3-00b4-9009206158fe}</li></ul><hr><h2 id="SWPUCTF-2021-新生赛-ez-caesar"><a href="#SWPUCTF-2021-新生赛-ez-caesar" class="headerlink" title="[SWPUCTF 2021 新生赛]ez_caesar"></a>[SWPUCTF 2021 新生赛]ez_caesar</h2><p>打开后是一个.py文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">caesar</span>(<span class="hljs-params">plaintext</span>):<br>    str_list = <span class="hljs-built_in">list</span>(plaintext)<br>    i = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> i &lt; <span class="hljs-built_in">len</span>(plaintext):<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> str_list[i].isalpha():<br>            str_list[i] = str_list[i]<br>        <span class="hljs-keyword">else</span>:<br>            a = <span class="hljs-string">&quot;A&quot;</span> <span class="hljs-keyword">if</span> str_list[i].isupper() <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;a&quot;</span><br>            str_list[i] = <span class="hljs-built_in">chr</span>((<span class="hljs-built_in">ord</span>(str_list[i]) - <span class="hljs-built_in">ord</span>(a) + <span class="hljs-number">5</span>) % <span class="hljs-number">26</span> + <span class="hljs-built_in">ord</span>(a) <span class="hljs-keyword">or</span> <span class="hljs-number">5</span>)<br>        i = i + <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(str_list)<br><br>flag = <span class="hljs-string">&quot;*************************&quot;</span><br><span class="hljs-built_in">str</span> = caesar(flag)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>)<br><br><span class="hljs-comment">#str=&quot;U1hYSFlLe2R0em1mYWpwc3RiaGZqeGZ3fQ==&quot;</span><br></code></pre></td></tr></table></figure><p>这，有点看不懂，GPT一下吧，下面是GPT的解释</p><blockquote><p>这段代码首先导入了base64模块，然后定义了一个名为caesar的函数，该函数接受一个明文字符串作为输入，并返回加密后的字符串。<br>在函数内部，首先将明文字符串转换为字符列表str_list，然后使用while循环遍历明文字符串的每个字符。<br>在每次循环中，首先检查当前字符是否为字母。如果不是字母，则将字符保持不变。如果是字母，则根据字母的大小写确定字母表的起始位置（大写字母从’A’开始，小写字母从’a’开始），然后使用凯撒密码的规则对字母进行替换。替换的规则是将字母的Unicode码减去起始位置的Unicode码，再加上一个固定的位移量5，然后对26取模，最后再加上起始位置的Unicode码或者5。这样可以确保替换后的字符仍然是一个字母。<br>循环结束后，将字符列表转换回字符串，并将加密后的字符串打印出来。<br>最后一行的注释掉的代码是一个经过base64编码的字符串，你可以在需要时将其解码。</p></blockquote><p>那我就懂了，嘻嘻</p><ul><li>凯撒密码（Caesar cipher），原来就是凯撒密码</li><li>最后一行注释掉的是base64编码后的结果</li><li>那我们就先base64解码，再凯撒解码应该就行</li><li>注意凯撒解码还需要一个偏移量，这里的偏移量就是5</li><li>最后得到 NSSCTF{youhaveknowcaesar}</li></ul><hr><h2 id="SWPUCTF-2021-新生赛-crypto10"><a href="#SWPUCTF-2021-新生赛-crypto10" class="headerlink" title="[SWPUCTF 2021 新生赛]crypto10"></a>[SWPUCTF 2021 新生赛]crypto10</h2><p>txt中的内容为：<code>AFFPGS&#123;pbatenghyngvbaf!!!&#125;,建议直接秒了</code></p><p>观察标签可以看出是个什么ROT加密，直接搜工具解密即可</p><p>NSSCTF{congratulations!!!}</p><hr><h2 id="鹤城杯-2021-A-CRYPTO"><a href="#鹤城杯-2021-A-CRYPTO" class="headerlink" title="[鹤城杯 2021]A_CRYPTO"></a>[鹤城杯 2021]A_CRYPTO</h2><p>逆天文本：4O595954494Q32515046324757595N534R52415653334357474R4N575955544R4O5N4Q46434S4O59474253464Q5N444R4Q51334557524O5N4S424944473542554O595N44534O324R49565746515532464O49345649564O464R4R494543504N35</p><p>从此知道了<strong>ciphey</strong>的存在，准备配置啊啊啊啊</p><p><a href="https://blog.csdn.net/Dome_/article/details/120689591?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169401549316800211566878%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=169401549316800211566878&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-120689591-null-null.142%5Ev93%5EchatgptT3_1&utm_term=ciphey&spm=1018.2226.3001.4187">全自动解密解码神器 — Ciphey</a></p><p><a href="https://blog.csdn.net/ntrybw/article/details/131516319?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169401549316800211566878%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=169401549316800211566878&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-7-131516319-null-null.142%5Ev93%5EchatgptT3_1&utm_term=ciphey&spm=1018.2226.3001.4187">Windows安装ciphey编码工具，编码工具战神，cry简单题绝对克星！</a></p><p>不知道为啥，就安装成功了，但是只能在windows下的cmd中使用，等会还要在kali里面再下一个<strong>ciphey</strong></p><p>解密命令为：</p><p><code>ciphey -t &quot;4O595954494Q32515046324757595N534R52415653334357474R4N575955544R4O5N4Q46434S4O59474253464Q5N444R4Q51334557524O5N4S424944473542554O595N44534O324R49565746515532464O49345649564O464R4R494543504N35&quot;</code></p><p><img src="https://iili.io/J9lb0js.png" alt="202309071.png"></p><p>所以flag为：”NSSCTF{W0w_y0u_c4n_rea11y_enc0d1ng!}”</p><blockquote><p>0<br>0<br>0<br>下面的东西可以忽略，<br>byd配环境配了将近一上午都没在kali里面配好，不是python版本问题就是什么PATH路径问题，到最后也没解决，草！<br>这里由于百度网盘下载的太慢，一顿搜索后发现了其他的方法，怎么没早点发现啊😭<br><a href="https://greasyfork.org/zh-CN/scripts/463707-%E5%B0%B1%E6%98%AF%E5%8A%A0%E9%80%9F-%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E6%97%A0%E9%99%90%E9%80%9F%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD-%E6%94%AF%E6%8C%81%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E8%BD%BD">不多说好吧，要是有有缘人看到算是你赚了🤭</a><br>下面就是kali中ciphey的配置<br><a href="http://old.kali.org/virtual-images/kali-2021.2/">http://old.kali.org/virtual-images/kali-2021.2/</a><br><a href="https://kali.download/">https://kali.download/</a></p></blockquote><hr><h2 id="SWPUCTF-2021-新生赛-pigpig"><a href="#SWPUCTF-2021-新生赛-pigpig" class="headerlink" title="[SWPUCTF 2021 新生赛]pigpig"></a>[SWPUCTF 2021 新生赛]pigpig</h2><p>根据提示是一个什么猪圈密码</p><p><a href="http://www.hiencode.com/pigpen.html">在线解密即可</a></p><p>NSSCTF{whenthepigwanttoeat}</p><p>什么时候🐖想吃？🐷</p><hr>]]></content>
    
    
    <categories>
      
      <category>CTF-Crypto</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Crypto</tag>
      
      <tag>NSSCTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法设计与分析-排序</title>
    <link href="/2023/09/06/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1-%E6%8E%92%E5%BA%8F/"/>
    <url>/2023/09/06/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1-%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言学习</title>
    <link href="/2023/09/05/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/09/05/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>code</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>求解1²+2²+3²+……+n²</title>
    <link href="/2023/09/05/%E6%B1%82%E8%A7%A31%C2%B2+2%C2%B2+3%C2%B2+%E2%80%A6%E2%80%A6+n%C2%B2/"/>
    <url>/2023/09/05/%E6%B1%82%E8%A7%A31%C2%B2+2%C2%B2+3%C2%B2+%E2%80%A6%E2%80%A6+n%C2%B2/</url>
    
    <content type="html"><![CDATA[<h2 id="一种简单的方法"><a href="#一种简单的方法" class="headerlink" title="一种简单的方法"></a>一种简单的方法</h2><p>在做数据结构第一章的习题时遇见这个问题，感觉很有意思，就写了下来</p><p>这种方法把1²+2²+3²+……+n²写成三个式子，相加除以3得到结果，如下：</p><p>1</p><p>2 2</p><p>3 3 3</p><p>………………………</p><p>n n ……………..n n  ①</p><hr><p>n</p><p>…………..n</p><p>3 ……………….n</p><p>2 3 …… ………..n</p><p>1 2 3………………..n   ②</p><hr><p>n</p><p>n ………</p><p>n ……………… 3</p><p>n ……………………..3 2</p><p>n …………………………….3 2 1  ③</p><p>这三个式子都表示1²+2²+3²+……+n²，把他们相加</p><p>①+②+③得</p><p>2n+1</p><p>2n+1 2n+1</p><p>………………………………</p><p>2n+1 2n+1 2n+1………………………2n+1 2n+1 2n+1   ①+②+③</p><p>3 ∑n² &#x3D; n(n+1)(2n+1)&#x2F;2</p><p>故 1²+2²+······+n² &#x3D; n（n+1）（2n+1）&#x2F;6</p>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>各种软件安装，环境配置</title>
    <link href="/2023/09/03/%E5%90%84%E7%A7%8D%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%EF%BC%8C%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <url>/2023/09/03/%E5%90%84%E7%A7%8D%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%EF%BC%8C%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="在VScode中配置Python开发环境"><a href="#在VScode中配置Python开发环境" class="headerlink" title="在VScode中配置Python开发环境"></a>在VScode中配置Python开发环境</h3><p><a href="https://blog.csdn.net/weixin_43737995/article/details/125690015?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169362300616800182129289%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=169362300616800182129289&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-125690015-null-null.142%5Ev93%5EchatgptT3_1&utm_term=vscode%20python%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE&spm=1018.2226.3001.4187">在VScode中配置Python开发环境</a></p><h3 id="Git安装"><a href="#Git安装" class="headerlink" title="Git安装"></a>Git安装</h3><p><a href="https://blog.csdn.net/mukes/article/details/115693833?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169205886716800188579548%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=169205886716800188579548&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-115693833-null-null.142%5Ev92%5EchatgptT0_1&utm_term=git%E5%AE%89%E8%A3%85&spm=1018.2226.3001.4187">Git 详细安装教程</a></p><h3 id="JAVA安装"><a href="#JAVA安装" class="headerlink" title="JAVA安装"></a>JAVA安装</h3><p><a href="https://blog.csdn.net/qq_48988285/article/details/125593715?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169396267216800182147901%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=169396267216800182147901&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-125593715-null-null.142%5Ev93%5EchatgptT3_1&utm_term=java%E5%AE%89%E8%A3%85&spm=1018.2226.3001.4187">超详细Java安装教程，小白速来！！！</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hexo建站过程中</title>
    <link href="/2023/08/16/hexo%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/"/>
    <url>/2023/08/16/hexo%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>b站yyds！！！</p><p><a href="https://www.bilibili.com/video/BV1Eg41157tL/?spm_id_from=333.337.search-card.all.click&vd_source=445ce756d899a4cef51cfb6b148ba121">hexo加GitHub搭建网站教程</a></p><p>评论区的搭建感谢大佬的博客<a href="https://ltyzzzxxx.github.io/2022/10/05/Hexo%E4%BB%8E0%E5%88%B01%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E5%88%9703%EF%BC%9A%E6%96%87%E7%AB%A0%E4%B8%8E%E8%AF%84%E8%AE%BA%E6%A8%A1%E5%9D%97/">周三不Coding</a></p><hr><hr><p><strong>下面是遇到的一些问题</strong></p><h2 id="hexo-d-总是报错"><a href="#hexo-d-总是报错" class="headerlink" title="hexo d 总是报错"></a><code>hexo d</code> 总是报错</h2><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">Error: </span>Spawn failed<br>这错误烦死人，一直报<br></code></pre></td></tr></table></figure><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li>重新配置一下SSH，把下面的<strong>write</strong>那个选项给它勾上！！！！！！！！！！！！</li><li>不知道为啥，下面竟然还有个选项，不勾上的话就是read only，然后就会一直报那个错误😡😡</li></ul><h2 id="bash-hexo-command-not-found"><a href="#bash-hexo-command-not-found" class="headerlink" title="bash: hexo: command not found"></a><code>bash: hexo: command not found</code></h2><h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><p>将<code>D:\blog\myblog\node_modules\.bin</code>,添加到Path中</p><h2 id="错误如下"><a href="#错误如下" class="headerlink" title="错误如下"></a>错误如下</h2><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs subunit">ssh: Could not resolve hostname github.com: Name or service not known<br>fatal: Could not read from remote repository.<br><br>Please make sure you have the correct access rights<br>and the repository exists.<br>FATAL Something&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/d<br>ocs/troubleshooting.html<br><span class="hljs-keyword">Error: </span>Spawn failed<br>    at ChildProcess.&lt;anonymous&gt; (D:\blog\myblog\node_modules\hexo-util\lib\spawn<br>.js:51:21)<br>    at ChildProcess.emit (node:events:514:28)<br>    at cp.emit (D:\blog\myblog\node_modules\cross-spawn\lib\enoent.js:34:29)<br>    at ChildProcess._handle.onexit (node:internal/child_process:291:12)<br>    <br></code></pre></td></tr></table></figure><p>不知道为什么会报这个错误，可能是我总是翻墙的问题吧，不太懂，草，一会一个错误md😡</p><h3 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h3><p><a href="https://blog.csdn.net/li_001/article/details/70245006?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169400980416800225586698%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=169400980416800225586698&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-70245006-null-null.142%5Ev93%5EchatgptT3_1&utm_term=ssh:%20Could%20not%20resolve%20hostname%20github.com:%20Name%20or%20service%20not%20known%20fatal:%20Could%20not%20read%20from%20remote%20repository.&spm=1018.2226.3001.4187">CSDN解决方案</a></p><p>方案一亲测有效，CSDNyyds！😭</p>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/08/14/hello-world/"/>
    <url>/2023/08/14/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试博客</title>
    <link href="/2023/08/03/%E6%B5%8B%E8%AF%95%E5%8D%9A%E5%AE%A2/"/>
    <url>/2023/08/03/%E6%B5%8B%E8%AF%95%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h3 id="pwn1"><a href="#pwn1" class="headerlink" title="pwn1"></a>pwn1</h3><h3 id="pwn2"><a href="#pwn2" class="headerlink" title="pwn2"></a>pwn2</h3><p><a href="https://freeimage.host/i/J9YVHSj"><img src="https://iili.io/J9YVHSj.md.png" alt="2309062"></a></p><p><img src="https://freeimage.host/i/J9YVHSj" alt="2309062"></p><p><img src="https://iili.io/J9YVHSj.md.png" alt="2309062"></p><p><img src="http://static.runoob.com/images/runoob-logo.png" alt="RUNOOB 图标" title="RUNOOB"></p><p><del>撒旦哈市风口浪尖</del></p><p>测试一下，看能不能直接传图片</p><p><img src="https://cdn.jsdelivr.net/gh/viper2383/blogimages/blog-imgimage-20230908210230931.png" alt="image-20230908210230931"></p>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>汇编语言实验</title>
    <link href="/2023/05/27/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%AE%9E%E9%AA%8C/"/>
    <url>/2023/05/27/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%AE%9E%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="loop双层循环"><a href="#loop双层循环" class="headerlink" title="loop双层循环"></a>loop双层循环</h2><hr><p><a href="https://freeimage.host/i/H655pWu"><img src="https://iili.io/H655pWu.md.png" alt="H655pWu.md.png"></a></p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">assume</span> <span class="hljs-built_in">cs</span>:code<br><br>code <span class="hljs-meta">segment</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">start:</span>  <span class="hljs-keyword">mov</span> <span class="hljs-built_in">dx</span>,<span class="hljs-number">0</span><br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">cx</span>,<span class="hljs-number">10</span><br><span class="hljs-symbol">        </span><br><span class="hljs-symbol">    s:</span>  <span class="hljs-keyword">push</span> <span class="hljs-built_in">cx</span><br><span class="hljs-symbol">        </span><br><span class="hljs-symbol">     b:</span> <span class="hljs-keyword">add</span> <span class="hljs-built_in">dx</span>,<span class="hljs-built_in">cx</span><br>    <br>        <span class="hljs-keyword">loop</span> b<br><br>        <span class="hljs-keyword">pop</span> <span class="hljs-built_in">cx</span>    <br>        <span class="hljs-keyword">loop</span> s  <br><br><br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">4c00h</span><br>        <span class="hljs-keyword">int</span> <span class="hljs-number">21h</span> <br><br><br>code ends<br>end start<br><br><br></code></pre></td></tr></table></figure><ul><li>两层循环解决</li></ul><hr><h2 id="实验4-bx-和loop的使用"><a href="#实验4-bx-和loop的使用" class="headerlink" title="实验4 [bx]和loop的使用"></a>实验4 [bx]和loop的使用</h2><hr><p>1.编程，向内存0:200-0:23F依次传送数据0-63（3FH)。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">assume</span> <span class="hljs-built_in">cs</span>:code         <span class="hljs-comment">;八条指令的</span><br><br>code <span class="hljs-meta">segment</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">start:</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">bx</span>,<span class="hljs-number">0h</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ds</span>,<span class="hljs-built_in">bx</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">cx</span>,<span class="hljs-number">64</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">s:</span><span class="hljs-keyword">mov</span> [<span class="hljs-built_in">bx</span>+<span class="hljs-number">200h</span>],<span class="hljs-built_in">bx</span><br><span class="hljs-keyword">inc</span> <span class="hljs-built_in">bx</span><br><span class="hljs-keyword">loop</span> s<br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">4c00h</span><br><span class="hljs-keyword">int</span> <span class="hljs-number">21h</span><br>code ends<br>end start<br><br><br><br><br><span class="hljs-meta">assume</span> <span class="hljs-built_in">cs</span>:code         <span class="hljs-comment">;九条指令的，书上现在还规定指令数</span><br><br>code <span class="hljs-meta">segment</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">start:</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">0020H</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ds</span>,<span class="hljs-built_in">ax</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">bx</span>,<span class="hljs-number">0</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">cx</span>,<span class="hljs-number">64</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">s:</span><span class="hljs-keyword">mov</span> [<span class="hljs-built_in">bx</span>],<span class="hljs-built_in">bl</span><br>   <span class="hljs-keyword">inc</span> <span class="hljs-built_in">bx</span><br>   <span class="hljs-keyword">loop</span> s<br><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">4c00h</span><br><span class="hljs-keyword">int</span> <span class="hljs-number">21h</span><br>code ends<br>end start<br><br><br></code></pre></td></tr></table></figure><hr><h2 id="实验5-编写、调试具有多个段的程序"><a href="#实验5-编写、调试具有多个段的程序" class="headerlink" title="实验5 编写、调试具有多个段的程序"></a>实验5 编写、调试具有多个段的程序</h2><hr><p>1.程 序如下，编写code段中的代码，将a段和b段中的数据依次相加，将结果保存到c段中。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">assume</span> <span class="hljs-built_in">cs</span>:code<br>a <span class="hljs-meta">segment</span><br><span class="hljs-built_in">db</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span><br>a ends<br>b <span class="hljs-meta">segment</span><br><span class="hljs-built_in">db</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span><br>b ends<br>c <span class="hljs-meta">segment</span> <br><span class="hljs-built_in">db</span> <span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span><br>c ends<br>code <span class="hljs-meta">segment</span><br><span class="hljs-symbol">start:</span><br>?<br>code ends<br>end start<br><br><br>补充后的代码如下：<br><br><span class="hljs-meta">assume</span> <span class="hljs-built_in">cs</span>:code<br>a <span class="hljs-meta">segment</span><br><span class="hljs-built_in">db</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span><br>a ends<br>b <span class="hljs-meta">segment</span><br><span class="hljs-built_in">db</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span><br>b ends<br>c <span class="hljs-meta">segment</span> <br><span class="hljs-built_in">db</span> <span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span><br>c ends<br>code <span class="hljs-meta">segment</span><br><span class="hljs-symbol">start:</span> <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,a<br>   <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ds</span>,<span class="hljs-built_in">ax</span><br>   <span class="hljs-keyword">mov</span> <span class="hljs-built_in">cx</span>,<span class="hljs-number">8</span><br>   <span class="hljs-keyword">mov</span> <span class="hljs-built_in">si</span>,<span class="hljs-number">0</span><br><span class="hljs-symbol">   </span><br><span class="hljs-symbol">s:</span> <span class="hljs-keyword">mov</span> <span class="hljs-built_in">dx</span>,<span class="hljs-number">0</span><br>   <span class="hljs-keyword">add</span> <span class="hljs-built_in">dl</span>,[<span class="hljs-built_in">si</span>]<br>   <span class="hljs-keyword">add</span> <span class="hljs-built_in">dl</span>,[<span class="hljs-number">16</span>+<span class="hljs-built_in">si</span>]<br>   <span class="hljs-keyword">mov</span> [<span class="hljs-number">32</span>+<span class="hljs-built_in">si</span>],<span class="hljs-built_in">dl</span><br>   <span class="hljs-keyword">inc</span> <span class="hljs-built_in">si</span><br>   <span class="hljs-keyword">loop</span> s<br>   <br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">4c00h</span><br><span class="hljs-keyword">int</span> <span class="hljs-number">21h</span><br>code ends<br>end start<br></code></pre></td></tr></table></figure><p>2.程序 如下，编写code段代码，用push指令将a段中的前8个字型数据，逆序存储到b段中。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">assume</span> <span class="hljs-built_in">cs</span>:code <br>a <span class="hljs-meta">segment</span> <br><span class="hljs-built_in">dw</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">0ah</span>,<span class="hljs-number">0bh</span>,<span class="hljs-number">0ch</span>,<span class="hljs-number">0dh</span>,<span class="hljs-number">0eh</span>,<span class="hljs-number">0fh</span>,<span class="hljs-number">0ffh</span><br>a ends<br>b <span class="hljs-meta">segment</span> <br><span class="hljs-built_in">dw</span> <span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span><br>b ends<br>code <span class="hljs-meta">segment</span><br><span class="hljs-symbol">start:</span><br>?<br>code ends<br>end start<br><br><br>补充后的代码如下：<br><br><span class="hljs-meta">assume</span> <span class="hljs-built_in">cs</span>:code<br>a <span class="hljs-meta">segment</span> <br><span class="hljs-built_in">dw</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">0ah</span>,<span class="hljs-number">0bh</span>,<span class="hljs-number">0ch</span>,<span class="hljs-number">0dh</span>,<span class="hljs-number">0eh</span>,<span class="hljs-number">0fh</span>,<span class="hljs-number">0ffh</span><br>a ends<br><br>b <span class="hljs-meta">segment</span> <br><span class="hljs-built_in">dw</span> <span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span><br>b ends<br>code <span class="hljs-meta">segment</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">start:</span>  <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,a<br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ds</span>,<span class="hljs-built_in">ax</span><br>        <br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,b<br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ss</span>,<span class="hljs-built_in">ax</span><br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">sp</span>,<span class="hljs-number">16</span><br><br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">bx</span>,<span class="hljs-number">0</span><br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">cx</span>,<span class="hljs-number">8</span><br><span class="hljs-symbol">    s:</span>  <span class="hljs-keyword">push</span> [<span class="hljs-built_in">bx</span>]<br>        <span class="hljs-keyword">add</span> <span class="hljs-built_in">bx</span>,<span class="hljs-number">2</span><br>        <span class="hljs-keyword">loop</span> s <br><br><br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">4c00h</span><br>    <span class="hljs-keyword">int</span> <span class="hljs-number">21h</span><br>code ends<br>end start<br></code></pre></td></tr></table></figure><hr><h2 id="实验6-实践课程中的程序"><a href="#实验6-实践课程中的程序" class="headerlink" title="实验6 实践课程中的程序"></a>实验6 实践课程中的程序</h2><hr><p>将下面的程序补充完整，实现将 datasg 段中的每个单词的前 4 个字母改为大写字母。【要求：仅能修改 codesg segment 的代码】</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">assume</span> <span class="hljs-built_in">cs</span>:codesg, <span class="hljs-built_in">ss</span>:stacksg, <span class="hljs-built_in">ds</span>:datasg<br><br>stacksg <span class="hljs-meta">segment</span> <br><span class="hljs-built_in">dw</span> <span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span><br>stacksg ends<br><br>datasg <span class="hljs-meta">segment</span><br><span class="hljs-built_in">db</span> <span class="hljs-string">&#x27;1. display &#x27;</span><br><span class="hljs-built_in">db</span> <span class="hljs-string">&#x27;2. brows &#x27;</span><br><span class="hljs-built_in">db</span> <span class="hljs-string">&#x27;3. replace &#x27;</span><br><span class="hljs-built_in">db</span> <span class="hljs-string">&#x27;4. modify &#x27;</span><br>datasg ends<br><br>codesg <span class="hljs-meta">segment</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">start:</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">4c00h</span><br><span class="hljs-keyword">int</span> <span class="hljs-number">21h</span><br><br>codesg ends<br>end start<br><br><br><br>修改后的代码：<br><br><span class="hljs-meta">assume</span> <span class="hljs-built_in">cs</span>:codesg, <span class="hljs-built_in">ss</span>:stacksg, <span class="hljs-built_in">ds</span>:datasg<br><br>stacksg <span class="hljs-meta">segment</span> <br><span class="hljs-built_in">dw</span> <span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span><br>stacksg ends<br><br>datasg <span class="hljs-meta">segment</span><br><span class="hljs-built_in">db</span> <span class="hljs-string">&#x27;1. display      &#x27;</span><br><span class="hljs-built_in">db</span> <span class="hljs-string">&#x27;2. brows        &#x27;</span><br><span class="hljs-built_in">db</span> <span class="hljs-string">&#x27;3. replace      &#x27;</span><br><span class="hljs-built_in">db</span> <span class="hljs-string">&#x27;4. modify       &#x27;</span><br>datasg ends<br><br>codesg <span class="hljs-meta">segment</span><br><span class="hljs-symbol">start:</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,stacksg<br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ss</span>,<span class="hljs-built_in">ax</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">sp</span>,<span class="hljs-number">16</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,datasg<br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ds</span>,<span class="hljs-built_in">ax</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">bx</span>,<span class="hljs-number">0</span><br><br>            <span class="hljs-keyword">mov</span> <span class="hljs-built_in">cx</span>,<span class="hljs-number">4</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">       s0:</span>  <span class="hljs-keyword">push</span> <span class="hljs-built_in">cx</span><br>            <span class="hljs-keyword">mov</span> <span class="hljs-built_in">si</span>,<span class="hljs-number">0</span><br>            <span class="hljs-keyword">mov</span> <span class="hljs-built_in">cx</span>,<span class="hljs-number">4</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">       s1:</span>  <span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>,[<span class="hljs-built_in">bx</span>+<span class="hljs-number">3</span>+<span class="hljs-built_in">si</span>]<br>            <span class="hljs-keyword">and</span> <span class="hljs-built_in">al</span>,<span class="hljs-number">11011111b</span><br>            <span class="hljs-keyword">mov</span> [<span class="hljs-built_in">bx</span>+<span class="hljs-number">3</span>+<span class="hljs-built_in">si</span>],<span class="hljs-built_in">al</span><br><br>            <span class="hljs-keyword">inc</span> <span class="hljs-built_in">si</span><br>            <span class="hljs-keyword">loop</span> s1<br><br>            <span class="hljs-keyword">add</span> <span class="hljs-built_in">bx</span>,<span class="hljs-number">16</span><br>            <span class="hljs-keyword">pop</span> <span class="hljs-built_in">cx</span><br>            <span class="hljs-keyword">loop</span> s0 <br><br><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">4c00h</span><br>        <span class="hljs-keyword">int</span> <span class="hljs-number">21h</span><br>codesg ends<br><br>end start<br></code></pre></td></tr></table></figure><hr><h2 id="实验7-寻址方式在结构化数据访问中的应用"><a href="#实验7-寻址方式在结构化数据访问中的应用" class="headerlink" title="实验7 寻址方式在结构化数据访问中的应用"></a>实验7 寻址方式在结构化数据访问中的应用</h2><hr><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">assume</span> <span class="hljs-built_in">cs</span>:codesg<br><br>data <span class="hljs-meta">segment</span><br>        <span class="hljs-built_in">db</span> <span class="hljs-string">&#x27;1975&#x27;</span>,<span class="hljs-string">&#x27;1976&#x27;</span>,<span class="hljs-string">&#x27;1977&#x27;</span>,<span class="hljs-string">&#x27;1978&#x27;</span>,<span class="hljs-string">&#x27;1979&#x27;</span>,<span class="hljs-string">&#x27;1980&#x27;</span>,<span class="hljs-string">&#x27;1981&#x27;</span>,<span class="hljs-string">&#x27;1982&#x27;</span>,<span class="hljs-string">&#x27;1983&#x27;</span><br>        <span class="hljs-built_in">db</span> <span class="hljs-string">&#x27;1984&#x27;</span>,<span class="hljs-string">&#x27;1985&#x27;</span>,<span class="hljs-string">&#x27;1986&#x27;</span>,<span class="hljs-string">&#x27;1987&#x27;</span>,<span class="hljs-string">&#x27;1988&#x27;</span>,<span class="hljs-string">&#x27;1989&#x27;</span>,<span class="hljs-string">&#x27;1990&#x27;</span>,<span class="hljs-string">&#x27;1991&#x27;</span>,<span class="hljs-string">&#x27;1992&#x27;</span><br>        <span class="hljs-built_in">db</span> <span class="hljs-string">&#x27;1993&#x27;</span>,<span class="hljs-string">&#x27;1994&#x27;</span>,<span class="hljs-string">&#x27;1995&#x27;</span><br>        <span class="hljs-comment">;以上是表示21年的21个字符串</span><br>        <span class="hljs-built_in">dd</span> <span class="hljs-number">16</span>,<span class="hljs-number">22</span>,<span class="hljs-number">382</span>,<span class="hljs-number">1356</span>,<span class="hljs-number">2390</span>,<span class="hljs-number">8000</span>,<span class="hljs-number">16000</span>,<span class="hljs-number">24486</span>,<span class="hljs-number">50065</span>,<span class="hljs-number">97479</span>,<span class="hljs-number">140417</span>,<span class="hljs-number">197514</span><br>        <span class="hljs-built_in">dd</span> <span class="hljs-number">345980</span>,<span class="hljs-number">590827</span>,<span class="hljs-number">803530</span>,<span class="hljs-number">1183000</span>,<span class="hljs-number">1843000</span>,<span class="hljs-number">2759000</span>,<span class="hljs-number">3753000</span>,<span class="hljs-number">4649000</span>,<span class="hljs-number">5937000</span><br>        <span class="hljs-comment">;以上是表示21年公司总收的21个dword型数据</span><br>        <span class="hljs-built_in">dw</span> <span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">9</span>,<span class="hljs-number">13</span>,<span class="hljs-number">28</span>,<span class="hljs-number">38</span>,<span class="hljs-number">130</span>,<span class="hljs-number">220</span>,<span class="hljs-number">476</span>,<span class="hljs-number">778</span>,<span class="hljs-number">1001</span>,<span class="hljs-number">1442</span>,<span class="hljs-number">2258</span>,<span class="hljs-number">2793</span>,<span class="hljs-number">4037</span>,<span class="hljs-number">5635</span>,<span class="hljs-number">8226</span><br>        <span class="hljs-built_in">dw</span> <span class="hljs-number">11542</span>,<span class="hljs-number">14430</span>,<span class="hljs-number">15257</span>,<span class="hljs-number">17800</span><br>        <span class="hljs-comment">;以上是表示21年公司雇员人数的21个word型数据</span><br>data ends<br><br><br>table <span class="hljs-meta">segment</span><br>    <span class="hljs-built_in">db</span> <span class="hljs-number">21</span> dup (<span class="hljs-string">&#x27;year summ ne ?? &#x27;</span>)<br>table ends<br><br><br>codesg <span class="hljs-meta">segment</span><br><span class="hljs-symbol">start:</span>  <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,data<br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">es</span>,<span class="hljs-built_in">ax</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,table<br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ds</span>,<span class="hljs-built_in">ax</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">bx</span>,<span class="hljs-number">0</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">si</span>,<span class="hljs-number">0</span>       <span class="hljs-comment">;初始化年份和收入的具体位置</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">di</span>,<span class="hljs-number">0</span>   <span class="hljs-comment">;初始化雇员数和人均收入的具体位置</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">cx</span>,<span class="hljs-number">21</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">s:</span>  <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-built_in">es</span>:[<span class="hljs-built_in">si</span>]           <span class="hljs-comment">;年份和收入的低16bit，占两个字节</span><br><span class="hljs-keyword">mov</span> [<span class="hljs-built_in">bx</span>+<span class="hljs-number">0h</span>],<span class="hljs-built_in">ax</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-built_in">es</span>:[<span class="hljs-built_in">si</span>+<span class="hljs-number">54h</span>] <span class="hljs-comment">;加54h是因为21*4=84=54h</span><br><span class="hljs-keyword">mov</span> [<span class="hljs-built_in">bx</span>+<span class="hljs-number">5h</span>],<span class="hljs-built_in">ax</span><br><span class="hljs-keyword">add</span> <span class="hljs-built_in">si</span>,<span class="hljs-number">2</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-built_in">es</span>:[<span class="hljs-built_in">si</span>]           <span class="hljs-comment">;年份和收入的高16bit，占两个字节</span><br><span class="hljs-keyword">mov</span> [<span class="hljs-built_in">bx</span>+<span class="hljs-number">2h</span>],<span class="hljs-built_in">ax</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-built_in">es</span>:[<span class="hljs-built_in">si</span>+<span class="hljs-number">54h</span>]<br><span class="hljs-keyword">mov</span> [<span class="hljs-built_in">bx</span>+<span class="hljs-number">7h</span>],<span class="hljs-built_in">ax</span><br><span class="hljs-keyword">add</span> <span class="hljs-built_in">si</span>,<span class="hljs-number">2</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-built_in">es</span>:[<span class="hljs-built_in">di</span>+<span class="hljs-number">0a8h</span>]      <span class="hljs-comment">;雇员数，占两个字节，加0a8h是因为84*2=168=a8h</span><br><span class="hljs-keyword">mov</span> [<span class="hljs-built_in">bx</span>+<span class="hljs-number">0ah</span>],<span class="hljs-built_in">ax</span>          <br><span class="hljs-keyword">add</span> <span class="hljs-built_in">di</span>,<span class="hljs-number">2</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,[<span class="hljs-built_in">bx</span>+<span class="hljs-number">5h</span>]<br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">dx</span>,[<span class="hljs-built_in">bx</span>+<span class="hljs-number">7h</span>]<br><span class="hljs-keyword">div</span> <span class="hljs-built_in">word</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">bx</span>+<span class="hljs-number">0ah</span>]   <span class="hljs-comment">;除法算人均收入</span><br><span class="hljs-keyword">mov</span> [<span class="hljs-built_in">bx</span>+<span class="hljs-number">0dh</span>],<span class="hljs-built_in">ax</span><br><br><span class="hljs-keyword">add</span> <span class="hljs-built_in">bx</span>,<span class="hljs-number">16</span><br><span class="hljs-keyword">loop</span> s<br><br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">4c00h</span><br>        <span class="hljs-keyword">int</span> <span class="hljs-number">21h</span><br>codesg ends<br><br><br>end start<br></code></pre></td></tr></table></figure><hr><h2 id="实验9-根据材料编程"><a href="#实验9-根据材料编程" class="headerlink" title="实验9 根据材料编程"></a>实验9 根据材料编程</h2><hr><p>1.将你的姓名和学号在屏幕上中间显示出来。字符属性要求如下： 学号尾号为 1，3，5，7，9 的为黑底绿色；学号尾号为 0，2，4，6，8 的为黑底红色。</p><ul><li><p>BL（闪烁）    R G B（背景）   I （高亮）    R G B （前景）</p></li><li><p>80x25彩色字符模式显示缓冲区(以下简称为显示缓冲区)的结构:</p><ul><li>内存地址空间中，B8000H~BFFFFH 共32KB的空间，为80X25 彩色字符模式的显示缓冲区。向这个地址空间写入数据，写入的内容将立即出现在显示器上。</li><li>在 80x25 彩色字符模式下，显示器可以显示 25 行，每行80个字符，每个字符可以有256 种属性(背景色、前景色、闪、高亮等合信息)。</li><li>这样，一个字符在显示缓冲区中就要占两个字节，分别存放字符的 ASCII码和属性。</li><li>80x25模式下，一屏的内容在显示缓冲区中共占4000个字节。</li><li>显示缓冲区分为 8页，每页 4KB(4000B)，显示器可以显示任意一页的内容。一般情况下，显示第0页的内容。也就是说通常情况下，B8000H~B8F9FH 中的4000个字节的内容将出现在显示器上。</li></ul></li><li><p>在一页显示缓冲区中:</p><ul><li>偏移000~09F对应显示器上的第1行(80个字符占160个字节);</li><li>偏移0A0~13F对应显示器上的第2行;</li><li>偏移140~1DF对应显示器上的第3行;</li><li>依此类推，可知，偏移FOO~F9F 对应显示器上的第25 行。</li></ul></li><li><p>在一行中，<strong>一个字符占两个字节的存储空间(一个字)，低位字节存储字符的 ASCII码，高位字节存储字符的属性。一行共有 80个字符，占160个字节</strong>。即在一行中:</p><ul><li>00~01单元对应显示器上的第 1列:</li><li>02~03单元对应显示器上的第2列</li><li>04~05单元对应显示器上的第3 列</li><li>依此类推，可知，9E~9F 单元对应显示器上的第 80 列</li></ul></li></ul><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">assume</span> <span class="hljs-built_in">cs</span>:code<br><br>data <span class="hljs-meta">segment</span><br><span class="hljs-built_in">db</span> <span class="hljs-string">&#x27;ID: 2021100001, Name: Lu Shuaichao&#x27;</span><br>data ends<br><br>code <span class="hljs-meta">segment</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">start:</span> <br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,data<br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ds</span>,<span class="hljs-built_in">ax</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">bx</span>,<span class="hljs-number">0</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">0B800H</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">es</span>,<span class="hljs-built_in">ax</span>                <span class="hljs-comment">;es 控制打印到屏幕上</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">bp</span>,<span class="hljs-number">070eh</span>    <br><br><span class="hljs-comment">;bp 控制打印在屏幕上具体的位置。显示器中间的位置为第 12 行（一共25行嘛），对应的偏移为06e0h（11*160）。</span><br><span class="hljs-comment">;要打印的内容共 34 个字符，每个字符占两字节，每行占 160个字节，所以要从与行首位置偏移为 46（002eh）的位置写入，这个位置刚好为中间的位置。</span><br><span class="hljs-comment">;06e0h + 002eh 最终可得出应从偏移为 070eh 的位置开始写入。</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">dl</span>,<span class="hljs-number">00000100b</span>          <span class="hljs-comment">;dl 寄存器存放颜色属性</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">cx</span>,<span class="hljs-number">34</span>                <span class="hljs-comment">;一次打印循环次数</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">s2:</span> <span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>,[<span class="hljs-built_in">bx</span>]<br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">es</span>:[<span class="hljs-built_in">bp</span>],<span class="hljs-built_in">al</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">es</span>:[<span class="hljs-built_in">bp</span>+<span class="hljs-number">1</span>],<span class="hljs-built_in">dl</span>          <span class="hljs-comment">;每次向显存中写入一个字符（两个字节）</span><br><br><span class="hljs-keyword">inc</span> <span class="hljs-built_in">bx</span>                   <span class="hljs-comment">;下一个字符</span><br><span class="hljs-keyword">add</span> <span class="hljs-built_in">bp</span>,<span class="hljs-number">2</span><br><span class="hljs-keyword">loop</span> s2<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">s0:</span> <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">4c00h</span><br><span class="hljs-keyword">int</span> <span class="hljs-number">21h</span><br><br>code ends<br>end start<br></code></pre></td></tr></table></figure><hr><h2 id="实验10-编写子程序"><a href="#实验10-编写子程序" class="headerlink" title="实验10 编写子程序"></a>实验10 编写子程序</h2><hr><p>1.显示字符串</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">assume</span> <span class="hljs-built_in">cs</span>:code<br>data <span class="hljs-meta">segment</span><br><span class="hljs-built_in">db</span> <span class="hljs-string">&#x27;Welcome to masm!&#x27;</span>,<span class="hljs-number">0</span><br>data ends<br><br>code <span class="hljs-meta">segment</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">start:</span>  <span class="hljs-keyword">mov</span> <span class="hljs-number">dh</span>,<span class="hljs-number">8</span>           <span class="hljs-comment">;指定行号</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">dl</span>,<span class="hljs-number">3</span>           <span class="hljs-comment">;指定列号</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">cl</span>,<span class="hljs-number">2</span>   <span class="hljs-comment">;指定颜色</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,data<br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ds</span>,<span class="hljs-built_in">ax</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">si</span>,<span class="hljs-number">0</span><br><span class="hljs-keyword">call</span> show_str<br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">4c00h</span><br><span class="hljs-keyword">int</span> <span class="hljs-number">21h</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">show_str:</span><span class="hljs-keyword">push</span> <span class="hljs-built_in">ax</span><br><span class="hljs-keyword">push</span> <span class="hljs-built_in">bx</span><br><span class="hljs-keyword">push</span> <span class="hljs-built_in">dx</span><br><span class="hljs-keyword">push</span> <span class="hljs-built_in">si</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">0B800H</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">es</span>,<span class="hljs-built_in">ax</span>          <span class="hljs-comment">;设置es为显示区段地址</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">00A0H</span>       <span class="hljs-comment">;每行80个字符，一共占160个字节</span><br><span class="hljs-keyword">mul</span> <span class="hljs-number">dh</span>             <span class="hljs-comment">;设置字符显示在哪行</span><br><span class="hljs-keyword">mov</span> <span class="hljs-number">dh</span>,<span class="hljs-number">0</span><br><span class="hljs-keyword">add</span> <span class="hljs-built_in">ax</span>,<span class="hljs-built_in">dx</span><br><span class="hljs-keyword">add</span> <span class="hljs-built_in">ax</span>,<span class="hljs-built_in">dx</span>          <span class="hljs-comment">;加两次是因为一个字符占两个字节，</span><br> <span class="hljs-comment">;比如屏幕上的一个字母a，它就占两个字节，一个字节是ascii码，一个字节是属性</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">bx</span>,<span class="hljs-built_in">ax</span>          <span class="hljs-comment">;bx是显示区的偏移地址</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>,<span class="hljs-built_in">cl</span>         <span class="hljs-comment">;颜色属性存入al</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">si</span>,<span class="hljs-number">0</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">a:</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">cl</span>,<span class="hljs-built_in">ds</span>:[<span class="hljs-built_in">si</span>]     <span class="hljs-comment">;ds:[si]是当前指向的字符</span><br><span class="hljs-keyword">mov</span> <span class="hljs-number">ch</span>,<span class="hljs-number">0</span><br><span class="hljs-keyword">jcxz</span> ok           <span class="hljs-comment">;读到0就退出循环</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">es</span>:[<span class="hljs-built_in">bx</span>],<span class="hljs-built_in">cl</span>     <span class="hljs-comment">;第一个是字母</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">es</span>:[<span class="hljs-built_in">bx</span>+<span class="hljs-number">1</span>],<span class="hljs-built_in">al</span>    <span class="hljs-comment">;第二个是属性</span><br><br><span class="hljs-keyword">inc</span> <span class="hljs-built_in">si</span><br><span class="hljs-keyword">add</span> <span class="hljs-built_in">bx</span>,<span class="hljs-number">2</span><br><span class="hljs-keyword">jmp</span> short a<br><span class="hljs-symbol"></span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">ok:</span> <span class="hljs-keyword">pop</span> <span class="hljs-built_in">si</span><br><span class="hljs-keyword">pop</span> <span class="hljs-built_in">dx</span><br><span class="hljs-keyword">pop</span> <span class="hljs-built_in">bx</span><br><span class="hljs-keyword">pop</span> <span class="hljs-built_in">ax</span><br><span class="hljs-keyword">ret</span><br><br><br>code ends<br>end start<br><br><br></code></pre></td></tr></table></figure><p>2.数值显示（加上判断溢出后的代码没看懂）</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">assume</span> <span class="hljs-built_in">cs</span>:code,<span class="hljs-built_in">ds</span>:data,<span class="hljs-built_in">ss</span>:stack<br>data <span class="hljs-meta">segment</span><br>    <span class="hljs-built_in">db</span> <span class="hljs-number">10</span> dup(<span class="hljs-number">0</span>)<br>data ends<br> <br>stack <span class="hljs-meta">segment</span><br>    <span class="hljs-built_in">dw</span> <span class="hljs-number">16</span> dup(<span class="hljs-number">0</span>)    <span class="hljs-comment">;32字节</span><br>stack ends<br> <br>code <span class="hljs-meta">segment</span><br><span class="hljs-symbol">start:</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">bx</span>,data    <span class="hljs-comment">;设置ds段地址</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ds</span>,<span class="hljs-built_in">bx</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">bx</span>,stack    <span class="hljs-comment">;设置栈顶</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ss</span>,<span class="hljs-built_in">bx</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">sp</span>,<span class="hljs-number">20H</span><br> <br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">12666</span>     <span class="hljs-comment">;要显示的数据</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">si</span>,<span class="hljs-number">0</span>         <span class="hljs-comment">;ds:si指向字符串首地址</span><br>    <span class="hljs-keyword">call</span> dtoc        <span class="hljs-comment">;将数据转为十进制字符</span><br>    <br>    <span class="hljs-keyword">mov</span> <span class="hljs-number">dh</span>,<span class="hljs-number">8</span>    <span class="hljs-comment">;在屏幕第几行开始显示</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">dl</span>,<span class="hljs-number">3</span>    <span class="hljs-comment">;在屏幕第几列开始显示</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">cl</span>,<span class="hljs-number">2</span>    <span class="hljs-comment">;显示的字符的颜色</span><br>    <span class="hljs-keyword">call</span> show_str<br> <br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">4c00H</span>    <span class="hljs-comment">;程序返回</span><br>    <span class="hljs-keyword">int</span> <span class="hljs-number">21H</span><br><span class="hljs-symbol"> </span><br><span class="hljs-symbol"> </span><br><span class="hljs-symbol">dtoc:</span>    <span class="hljs-comment">;功能：将给定的word型数据转为十进制字符形式，存入data段，首地址ds:si</span><br>            <span class="hljs-comment">;参数：ax 指定的word数据 </span><br>            <span class="hljs-comment">;返回：ds:si指向data段字符串首地址</span><br>    <br>    <span class="hljs-keyword">push</span> <span class="hljs-built_in">bx</span><span class="hljs-comment">;    ;将子程序用到的寄存器压入栈</span><br>    <span class="hljs-keyword">push</span> <span class="hljs-built_in">cx</span><span class="hljs-comment">;    </span><br>    <span class="hljs-keyword">push</span> <span class="hljs-built_in">dx</span><span class="hljs-comment">;</span><br>    <span class="hljs-keyword">push</span> <span class="hljs-built_in">si</span><span class="hljs-comment">;</span><br> <br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">bx</span>,<span class="hljs-number">000aH</span>    <span class="hljs-comment">;bl = 除数，bh = 一共除了几次</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">dx</span>,<span class="hljs-number">0</span>    <span class="hljs-comment">;即将进行除法，dx是高16位，低16位在ax中</span><br><span class="hljs-symbol">pushyushu:</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">cx</span>,<span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">cl</span>,<span class="hljs-built_in">bl</span>    <span class="hljs-comment">;cx = 除数</span><br>    <span class="hljs-keyword">call</span> divdw    <span class="hljs-comment">;调用不会溢出的除法函数，结果的商的高16位，在dx中，</span><br>                    <span class="hljs-comment">;低16位在ax中，余数在cx中，余数一定&lt;10</span><br> <br>    <span class="hljs-keyword">push</span> <span class="hljs-built_in">cx</span>        <span class="hljs-comment">;cx=余数，这个余数在显示的时候要倒序显示，因此先压入栈</span><br>    <span class="hljs-keyword">inc</span> <span class="hljs-number">bh</span>         <span class="hljs-comment">;记录将余数压入栈的次数</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">cx</span>,<span class="hljs-built_in">ax</span>      <span class="hljs-comment">;cx = ax = 结果的商的低16位</span><br>    <span class="hljs-keyword">add</span> <span class="hljs-built_in">cx</span>,<span class="hljs-built_in">dx</span>      <span class="hljs-comment">;dx是结果的商的高16位，ax和dx一定都是非负数</span><br>    <span class="hljs-keyword">jcxz</span> popyushu        <span class="hljs-comment">;若cx=0，则说明除法计算已经完毕，跳转下一步执行</span><br>    <span class="hljs-keyword">jmp</span> short pushyushu<br><span class="hljs-symbol"> </span><br><span class="hljs-symbol">popyushu:</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-number">ch</span>,<span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">cl</span>,<span class="hljs-number">bh</span>    <span class="hljs-comment">;ch=0，所以cx = 将余数压入栈的次数，也就是接下来的循环次数</span><br><span class="hljs-symbol">s1:</span><br>    <span class="hljs-keyword">pop</span> <span class="hljs-built_in">ax</span><span class="hljs-comment">;            ;从栈中pop出一个余数</span><br>    <span class="hljs-keyword">add</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">30H</span>         <span class="hljs-comment">;从数字转为对应的数字字符</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ds</span>:[<span class="hljs-built_in">si</span>],<span class="hljs-built_in">al</span>     <span class="hljs-comment">;用al就够了</span><br>    <span class="hljs-keyword">inc</span> <span class="hljs-built_in">si</span><br>    <span class="hljs-keyword">loop</span> s1<br>    <br>    <span class="hljs-keyword">pop</span> <span class="hljs-built_in">si</span>    <span class="hljs-comment">;子程序结束，将寄存器的值pop出来</span><br>    <span class="hljs-keyword">pop</span> <span class="hljs-built_in">dx</span><span class="hljs-comment">;    </span><br>    <span class="hljs-keyword">pop</span> <span class="hljs-built_in">cx</span><span class="hljs-comment">;</span><br>    <span class="hljs-keyword">pop</span> <span class="hljs-built_in">bx</span><span class="hljs-comment">;</span><br>    <br>    <span class="hljs-keyword">ret</span><br><span class="hljs-symbol"> </span><br><span class="hljs-symbol">divdw:</span>      <span class="hljs-comment">;功能：计算word型被除数与byte型除数的除法</span><br>            <span class="hljs-comment">;参数：  ax=被除数低16位，dx=被除数高16位，cx = 除数</span><br>            <span class="hljs-comment">;返回：  ax=商的低16位，dx=商的高16位，cx = 余数</span><br> <br>    <span class="hljs-comment">;计算公式： X/N = int( H/N ) * 65536 + [rem( H/N) * 65536 + L]/N  </span><br>    <span class="hljs-comment">;其中X为被除数，N为除数，H为被除数的高16位，L为被除数的低16位，</span><br>    <span class="hljs-comment">;int()表示结果的商，rem()表示结果的余数。</span><br> <br>    <span class="hljs-keyword">push</span> <span class="hljs-built_in">bx</span>      <span class="hljs-comment">;bx是额外用到的寄存器，要压入栈</span><br> <br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">bx</span>,<span class="hljs-built_in">ax</span>    <span class="hljs-comment">;bx=L</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-built_in">dx</span>    <span class="hljs-comment">;ax=H</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">dx</span>,<span class="hljs-number">0</span>     <span class="hljs-comment">;dx=0</span><br>    <span class="hljs-keyword">div</span> <span class="hljs-built_in">cx</span>        <span class="hljs-comment">;计算H/N，结果的商即int(H/N)保存在ax，余数即rem(H/N)保存在dx</span><br> <br>                    <span class="hljs-comment">;接下来要计算int(H/N)*65536，思考一下，65536就是0001 0000 H，</span><br>                    <span class="hljs-comment">;因此计算结果就是，高16位=int(H/N)，低16位为0000H。</span><br> <br>    <span class="hljs-keyword">push</span> <span class="hljs-built_in">ax</span>         <span class="hljs-comment">;将int(H/N)*65536结果的高16位，即int(H/N)，压入栈</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">0</span><br>    <span class="hljs-keyword">push</span> <span class="hljs-built_in">ax</span>         <span class="hljs-comment">;将int(H/N)*65536结果的低16位，即0000H，压入栈</span><br> <br>                    <span class="hljs-comment">;接下来要计算 rem(H/N)*65536 ，同理可得，</span><br>                    <span class="hljs-comment">;计算结果为 高16位=  rem(H/N)*65536 ，即此时dx的值，</span><br>                    <span class="hljs-comment">;低16位为 0000H。</span><br> <br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-built_in">bx</span>     <span class="hljs-comment">;ax = bx = L ，即 [rem(H/N)*65536 + L]的低16位</span><br>    <span class="hljs-keyword">div</span> <span class="hljs-built_in">cx</span>        <span class="hljs-comment">;计算 [rem( H/N) * 65536 + L]/N ，结果的商保存在ax，余数保存在dx</span><br> <br>                    <span class="hljs-comment">;接下来要将两项求和。  左边项的高、低16位都在栈中，</span><br>                    <span class="hljs-comment">;其中高16位就是最终结果的高16位，低16位是0000H。</span><br>                    <span class="hljs-comment">;右边项的商为16位，在ax中，也就是最终结果的低16位，</span><br>                    <span class="hljs-comment">;余数在dx中，也就是最终结果的余数。</span><br> <br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">cx</span>,<span class="hljs-built_in">dx</span>     <span class="hljs-comment">;cx = 最终结果的余数</span><br>    <span class="hljs-keyword">pop</span> <span class="hljs-built_in">bx</span>        <span class="hljs-comment">;cx = int(H/N)*65536结果的低16位，即0000H。</span><br>    <span class="hljs-keyword">pop</span> <span class="hljs-built_in">dx</span>        <span class="hljs-comment">;bx = int(H/N)*65536结果的高16位，即最终结果的高16位</span><br> <br>    <span class="hljs-keyword">pop</span> <span class="hljs-built_in">bx</span>    <span class="hljs-comment">;还原bx的值</span><br> <br>    <span class="hljs-keyword">ret</span><br><span class="hljs-symbol"> </span><br><span class="hljs-symbol">    </span><br><span class="hljs-symbol">show_str:</span><br>                <span class="hljs-comment">;功能：将data段中首地址为ds:si的字符，以指定颜色显示在屏幕指定位置</span><br>                <span class="hljs-comment">;参数：dh 行号， dl 列号 ，cl 颜色</span><br>                <span class="hljs-comment">;返回：无</span><br> <br>    <span class="hljs-keyword">push</span> <span class="hljs-built_in">dx</span>        <span class="hljs-comment">;将子程序用到的寄存器压入栈</span><br>    <span class="hljs-keyword">push</span> <span class="hljs-built_in">si</span><br>    <span class="hljs-keyword">push</span> <span class="hljs-built_in">ax</span><br>    <span class="hljs-keyword">push</span> <span class="hljs-built_in">bx</span><br>    <br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">0B800H</span>    <span class="hljs-comment">;设置es为显示区段地址</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">es</span>,<span class="hljs-built_in">ax</span><br>    <br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">00A0H</span>    <span class="hljs-comment">;设置首字符显示的地址</span><br>    <span class="hljs-keyword">mul</span> <span class="hljs-number">dh</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-number">dh</span>,<span class="hljs-number">0</span><br>    <span class="hljs-keyword">add</span> <span class="hljs-built_in">ax</span>,<span class="hljs-built_in">dx</span> <br>    <span class="hljs-keyword">add</span> <span class="hljs-built_in">ax</span>,<span class="hljs-built_in">dx</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">bx</span>,<span class="hljs-built_in">ax</span>    <span class="hljs-comment">;bx是显示区的偏移地址</span><br>        <br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>,<span class="hljs-built_in">cl</span>    <span class="hljs-comment">;用al存储属性字节</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-number">ch</span>,<span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">si</span>,<span class="hljs-number">0</span><br><span class="hljs-symbol">    </span><br><span class="hljs-symbol">    s:</span>                <span class="hljs-comment">;循环读取字符并显示</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">cl</span>,<span class="hljs-built_in">ds</span>:[<span class="hljs-built_in">si</span>]<br>    <span class="hljs-keyword">jcxz</span> ok            <span class="hljs-comment">;若读到0，就退出循环</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">es</span>:[<span class="hljs-built_in">bx</span>],<span class="hljs-built_in">cl</span><br>    <span class="hljs-keyword">inc</span> <span class="hljs-built_in">bx</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">es</span>:[<span class="hljs-built_in">bx</span>],<span class="hljs-built_in">al</span><br>    <span class="hljs-keyword">inc</span> <span class="hljs-built_in">bx</span><br>    <span class="hljs-keyword">inc</span> <span class="hljs-built_in">si</span><br>    <span class="hljs-keyword">jmp</span> short s<br><span class="hljs-symbol"> </span><br><span class="hljs-symbol">    ok:</span>        <span class="hljs-comment">;将寄存器的值pop出来</span><br>    <span class="hljs-keyword">pop</span> <span class="hljs-built_in">bx</span><br>    <span class="hljs-keyword">pop</span> <span class="hljs-built_in">ax</span><br>    <span class="hljs-keyword">pop</span> <span class="hljs-built_in">si</span><br>    <span class="hljs-keyword">pop</span> <span class="hljs-built_in">dx</span><br>    <br>    <span class="hljs-keyword">ret</span>    <span class="hljs-comment">;返回</span><br> <br> <br>code ends<br>end start<br> <br><br><br></code></pre></td></tr></table></figure><hr><h2 id="实验12-编写0号中断的处理程序"><a href="#实验12-编写0号中断的处理程序" class="headerlink" title="实验12 编写0号中断的处理程序"></a>实验12 编写0号中断的处理程序</h2><hr><p>1.编写 0 号中断的处理程序并将其安装在 0:200 处，使得在除法溢出发生时，屏幕中间自动显示字符串“divide overflow!”,然后返回到 DOS。安装完中断处理程序后，编写针对该中断处理程序的测试程序，并运行测试程序，检查是否正确触发中断处理程序。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">assume</span> <span class="hljs-built_in">cs</span>:code<br><br>code <span class="hljs-meta">segment</span><br><span class="hljs-symbol">start:</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-built_in">cs</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ds</span>,<span class="hljs-built_in">ax</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">si</span>,offset do0                <span class="hljs-comment">;设置ds:si指向源地址</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">0</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">es</span>,<span class="hljs-built_in">ax</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">di</span>,<span class="hljs-number">200h</span>                      <span class="hljs-comment">;设置es:di指向目的地址</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">cx</span>,offset do0end-offset do0  <span class="hljs-comment">;cx为传输长度</span><br><span class="hljs-keyword">cld</span>                              <span class="hljs-comment">;传输方向为正</span><br><span class="hljs-keyword">rep</span> <span class="hljs-keyword">movsb</span>                        <span class="hljs-comment">;用movsb指令，将do0的代码送入0:200处</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">0</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">es</span>,<span class="hljs-built_in">ax</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">word</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">es</span>:[<span class="hljs-number">0</span>],<span class="hljs-number">200h</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">word</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">es</span>:[<span class="hljs-number">2</span>],<span class="hljs-number">0h</span>     <span class="hljs-comment">;设置中断向量</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">4c00h</span><br><span class="hljs-keyword">int</span> <span class="hljs-number">21h</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">   do0:</span><span class="hljs-keyword">jmp</span> short do0start       <span class="hljs-comment">;EB10 占两个字节，所以下面是202h，不是200h</span><br><span class="hljs-built_in">db</span> <span class="hljs-string">&quot;divide overflow!&quot;</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol"> do0start:</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-built_in">cs</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ds</span>,<span class="hljs-built_in">ax</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">si</span>,<span class="hljs-number">202h</span>      <span class="hljs-comment">;设置ds:si指向字符串</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">0b800h</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">es</span>,<span class="hljs-built_in">ax</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">di</span>,<span class="hljs-number">12</span>*<span class="hljs-number">160</span>+<span class="hljs-number">33</span>*<span class="hljs-number">2</span>    <span class="hljs-comment">;设置es:di指向显存空间的中间位置</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">cx</span>,<span class="hljs-number">16</span>             <span class="hljs-comment">;cx为字符串长度</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">s:</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>,<span class="hljs-built_in">ds</span>:[<span class="hljs-built_in">si</span>]<br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">es</span>:[<span class="hljs-built_in">di</span>],<span class="hljs-built_in">al</span><br><span class="hljs-keyword">inc</span> <span class="hljs-built_in">di</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">es</span>:[<span class="hljs-built_in">di</span>],<span class="hljs-number">2H</span>  <br><span class="hljs-keyword">inc</span> <span class="hljs-built_in">di</span><br><br><span class="hljs-keyword">inc</span> <span class="hljs-built_in">si</span><br><span class="hljs-keyword">loop</span> s<br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">4c00h</span><br><span class="hljs-keyword">int</span> <span class="hljs-number">21h</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">do0end:</span><span class="hljs-keyword">nop</span><br><br>   <br>code ends<br>end start<br><br><br>测试程序：<br><span class="hljs-meta">assume</span> <span class="hljs-built_in">cs</span>:code<br><br>code <span class="hljs-meta">segment</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">start:</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">1000h</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">bx</span>,<span class="hljs-number">0</span><br><span class="hljs-keyword">mov</span> <span class="hljs-number">bh</span>,<span class="hljs-number">1h</span><br><span class="hljs-keyword">div</span> <span class="hljs-number">bh</span><br><br><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">4c00h</span><br><span class="hljs-keyword">int</span> <span class="hljs-number">21h</span><br><br><br>code ends<br>end start<br><br><br></code></pre></td></tr></table></figure><hr><h2 id="实验13-编写0号中断的处理程序"><a href="#实验13-编写0号中断的处理程序" class="headerlink" title="实验13 编写0号中断的处理程序"></a>实验13 编写0号中断的处理程序</h2><hr><p>编写并安装 int 7ch 中断例程，功能为以“年&#x2F;月&#x2F;日 时:分:秒”的格式，在屏幕中间显示当前的日期、时间。中断例程安装在 0:200 处。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">assume</span> <span class="hljs-built_in">cs</span>:code<br><br>code <span class="hljs-meta">segment</span><br><span class="hljs-symbol">start:</span>  <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-built_in">cs</span><br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ds</span>,<span class="hljs-built_in">ax</span><br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">si</span>,offset a           <span class="hljs-comment">;设置ds:si指向源地址</span><br><br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">0</span><br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">es</span>,<span class="hljs-built_in">ax</span><br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">di</span>,<span class="hljs-number">200h</span>               <span class="hljs-comment">;设置es:di指向目的地址</span><br><br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">cx</span>,offset aend-offset a      <span class="hljs-comment">;cx为传输长度</span><br>        <span class="hljs-keyword">cld</span>                               <span class="hljs-comment">;传输方向为正</span><br>        <span class="hljs-keyword">rep</span> <span class="hljs-keyword">movsb</span>                        <span class="hljs-comment">;用movsb指令，将a的代码送入0:200处</span><br>  <br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">0</span><br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">es</span>,<span class="hljs-built_in">ax</span><br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">word</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">es</span>:[<span class="hljs-number">7ch</span>*<span class="hljs-number">4</span>],<span class="hljs-number">200h</span><br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">word</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">es</span>:[<span class="hljs-number">7ch</span>*<span class="hljs-number">4</span>+<span class="hljs-number">2</span>],<span class="hljs-number">0</span>    <span class="hljs-comment">;设置中断向量</span><br><br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">4c00h</span><br>        <span class="hljs-keyword">int</span> <span class="hljs-number">21h</span><br><span class="hljs-symbol">        </span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">   a:</span>   <span class="hljs-keyword">jmp</span> short astart<br>   <span class="hljs-built_in">db</span> <span class="hljs-string">&quot;9/8/7 4:2:0&quot;</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">astart:</span> <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-built_in">cs</span><br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ds</span>,<span class="hljs-built_in">ax</span><br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">si</span>,<span class="hljs-number">202h</span>     <span class="hljs-comment">;ds:si指向数据段</span><br><br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">0b800h</span><br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">es</span>,<span class="hljs-built_in">ax</span><br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">bx</span>,<span class="hljs-number">160</span>*<span class="hljs-number">12</span>+<span class="hljs-number">30</span>*<span class="hljs-number">2</span><br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">di</span>,<span class="hljs-number">0</span>              <span class="hljs-comment">;es:di指向显示缓冲区</span><br><br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">cx</span>,<span class="hljs-number">11</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">   s:</span>   <span class="hljs-keyword">push</span> <span class="hljs-built_in">cx</span><br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">cl</span>,<span class="hljs-built_in">ds</span>:[<span class="hljs-built_in">si</span>]<br>        <span class="hljs-keyword">cmp</span> <span class="hljs-built_in">cl</span>,<span class="hljs-number">48</span><br>    <span class="hljs-keyword">jb</span> no      <br>    <span class="hljs-keyword">cmp</span> <span class="hljs-built_in">cl</span>,<span class="hljs-number">57</span><br>    <span class="hljs-keyword">ja</span> no  <span class="hljs-comment">;ASCII码值小于48或大于57则转移至no,即不是数字就直接显示</span><br><br>    <span class="hljs-keyword">call</span> yes          <span class="hljs-comment">;是数字就转移到yes处执行</span><br>    <span class="hljs-keyword">pop</span> <span class="hljs-built_in">cx</span><br>    <span class="hljs-keyword">loop</span> s<br><br>  <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">4c00h</span><br>  <span class="hljs-keyword">int</span> <span class="hljs-number">21h</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">   no:</span>  <span class="hljs-keyword">mov</span> <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">es</span>:[<span class="hljs-built_in">bx</span>+<span class="hljs-built_in">di</span>],<span class="hljs-built_in">cl</span><br>    <span class="hljs-keyword">add</span> <span class="hljs-built_in">di</span>,<span class="hljs-number">2</span><br>        <span class="hljs-keyword">inc</span> <span class="hljs-built_in">si</span><br><br>        <span class="hljs-keyword">pop</span> <span class="hljs-built_in">cx</span><br>        <span class="hljs-keyword">sub</span> <span class="hljs-built_in">cx</span>,<span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">jmp</span> <span class="hljs-built_in">far</span> <span class="hljs-built_in">ptr</span> s    <span class="hljs-comment">;段间转移至s处</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">   yes:</span> <span class="hljs-keyword">sub</span> <span class="hljs-built_in">cl</span>,<span class="hljs-number">48</span> <span class="hljs-comment">;字符转换为整数</span><br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>,<span class="hljs-built_in">cl</span><br>        <span class="hljs-keyword">out</span> <span class="hljs-number">70h</span>,<span class="hljs-built_in">al</span><br>        <span class="hljs-keyword">in</span> <span class="hljs-built_in">al</span>,<span class="hljs-number">71h</span><br><br>        <span class="hljs-keyword">mov</span> <span class="hljs-number">ah</span>,<span class="hljs-built_in">al</span><br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">cl</span>,<span class="hljs-number">4</span><br>        <span class="hljs-keyword">shr</span> <span class="hljs-number">ah</span>,<span class="hljs-built_in">cl</span><br>        <span class="hljs-keyword">and</span> <span class="hljs-built_in">al</span>,<span class="hljs-number">00001111b</span><br><br>        <span class="hljs-keyword">add</span> <span class="hljs-number">ah</span>,<span class="hljs-number">30h</span><br>        <span class="hljs-keyword">add</span> <span class="hljs-built_in">al</span>,<span class="hljs-number">30h</span><br><br>        <br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">es</span>:[<span class="hljs-built_in">bx</span>+<span class="hljs-built_in">di</span>],<span class="hljs-number">ah</span>     <br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">es</span>:[<span class="hljs-built_in">bx</span>+<span class="hljs-built_in">di</span>+<span class="hljs-number">2</span>],<span class="hljs-built_in">al</span>     <br>        <span class="hljs-keyword">add</span> <span class="hljs-built_in">di</span>,<span class="hljs-number">4</span><br>        <span class="hljs-keyword">inc</span> <span class="hljs-built_in">si</span><br><br>        <span class="hljs-keyword">ret</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">      aend:</span> <span class="hljs-keyword">nop</span><br><br>code ends<br>end start<br><br><br>测试程序：<br><span class="hljs-meta">assume</span> <span class="hljs-built_in">cs</span>:code<br>code <span class="hljs-meta">segment</span><br><span class="hljs-symbol">start:</span><br><span class="hljs-keyword">int</span> <span class="hljs-number">7ch</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">4c00h</span><br><span class="hljs-keyword">int</span> <span class="hljs-number">21h</span><br>code ends<br>end start<br><br><span class="hljs-comment">;问题：刚开始没注意到 db 中，即数据段中的数字是 ascii 码。</span><br><span class="hljs-comment">;解决办法：sub cl,48 ;将字符转换为整数</span><br><br></code></pre></td></tr></table></figure><hr><h2 id="实验15-安装新的-int9-中断例程"><a href="#实验15-安装新的-int9-中断例程" class="headerlink" title="实验15 安装新的 int9 中断例程"></a>实验15 安装新的 int9 中断例程</h2><hr><p>安装一个新的 int 9 中断例程，功能：在 DOS 下，按下“A”键后，如果松开，则显示满屏幕的“A”（字符显示属性为蓝底高亮红色），其他键照常处理。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><br><span class="hljs-comment">;(有点8懂)</span><br><br><span class="hljs-meta">assume</span> <span class="hljs-built_in">cs</span>:code<br><br>stack <span class="hljs-meta">segment</span><br>  <span class="hljs-built_in">db</span> <span class="hljs-number">128</span> dup (<span class="hljs-number">0</span>)<br>stack ends<br><br>code <span class="hljs-meta">segment</span><br><span class="hljs-symbol">start:</span>  <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,stack<br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ss</span>,<span class="hljs-built_in">ax</span><br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">sp</span>,<span class="hljs-number">128</span><br><br>        <span class="hljs-keyword">push</span> <span class="hljs-built_in">cs</span><br>        <span class="hljs-keyword">pop</span> <span class="hljs-built_in">ds</span><br><br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">0</span><br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">es</span>,<span class="hljs-built_in">ax</span><br><br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">si</span>,offset int9<br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">di</span>,<span class="hljs-number">204h</span><br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">cx</span>,offset int9end-offset int9     <span class="hljs-comment">;cx为传输长度</span><br>        <span class="hljs-keyword">cld</span>                                   <span class="hljs-comment">;设置传输方向为正</span><br>        <span class="hljs-keyword">rep</span> <span class="hljs-keyword">movsb</span><br><br>        <span class="hljs-keyword">push</span> <span class="hljs-built_in">es</span>:[<span class="hljs-number">9</span>*<span class="hljs-number">4</span>]<br>        <span class="hljs-keyword">pop</span> <span class="hljs-built_in">es</span>:[<span class="hljs-number">200h</span>]<br>        <span class="hljs-keyword">push</span> <span class="hljs-built_in">es</span>:[<span class="hljs-number">9</span>*<span class="hljs-number">4</span>+<span class="hljs-number">2</span>]<br>        <span class="hljs-keyword">pop</span> <span class="hljs-built_in">es</span>:[<span class="hljs-number">202h</span>]             <span class="hljs-comment">;将原int 9中断例程的入口地址保存在0:200单元处</span><br><br>        <span class="hljs-keyword">cli</span>                            <span class="hljs-comment">;设置IF=0，不响应可屏蔽中断</span><br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">word</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">es</span>:[<span class="hljs-number">9</span>*<span class="hljs-number">4</span>],<span class="hljs-number">204h</span><br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">word</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">es</span>:[<span class="hljs-number">9</span>*<span class="hljs-number">4</span>+<span class="hljs-number">2</span>],<span class="hljs-number">0</span>      <span class="hljs-comment">;将新的int 9中断例程安装在0:204处</span><br>        <span class="hljs-keyword">sti</span>                            <span class="hljs-comment">;设置IF=1，响应可屏蔽中断</span><br><br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">4c00h</span><br>        <span class="hljs-keyword">int</span> <span class="hljs-number">21h</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">int9:</span>   <span class="hljs-keyword">push</span> <span class="hljs-built_in">ax</span><br>        <span class="hljs-keyword">push</span> <span class="hljs-built_in">bx</span><br>        <span class="hljs-keyword">push</span> <span class="hljs-built_in">cx</span><br>        <span class="hljs-keyword">push</span> <span class="hljs-built_in">es</span><br><br>        <span class="hljs-keyword">in</span> <span class="hljs-built_in">al</span>,<span class="hljs-number">60h</span>                     <span class="hljs-comment">;从端口60h读出键盘的输入</span><br><br>        <span class="hljs-keyword">pushf</span><br>        <span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">cs</span>:[<span class="hljs-number">200h</span>]      <span class="hljs-comment">;调用BIOS的int 9中断例程</span><br><br>        <span class="hljs-keyword">cmp</span> <span class="hljs-built_in">al</span>,<span class="hljs-number">9eh</span><br>        <span class="hljs-keyword">jne</span> int9ret<br>    <br>        <span class="hljs-keyword">mov</span> <span class="hljs-number">ah</span>,<span class="hljs-string">&#x27;A&#x27;</span><br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>,<span class="hljs-number">1ch</span><br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">bx</span>,<span class="hljs-number">0b800h</span><br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">es</span>,<span class="hljs-built_in">bx</span><br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">bx</span>,<span class="hljs-number">0</span><br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">cx</span>,<span class="hljs-number">2000</span><br><span class="hljs-symbol">    s:</span>  <span class="hljs-keyword">mov</span> <span class="hljs-built_in">es</span>:[<span class="hljs-built_in">bx</span>],<span class="hljs-number">ah</span> <br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">es</span>:[<span class="hljs-built_in">bx</span>+<span class="hljs-number">1</span>],<span class="hljs-built_in">al</span><br>        <span class="hljs-keyword">add</span> <span class="hljs-built_in">bx</span>,<span class="hljs-number">2</span><br>        <span class="hljs-keyword">loop</span> s<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">int9ret:</span><span class="hljs-keyword">pop</span> <span class="hljs-built_in">es</span><br>        <span class="hljs-keyword">pop</span> <span class="hljs-built_in">cx</span><br>        <span class="hljs-keyword">pop</span> <span class="hljs-built_in">bx</span><br>        <span class="hljs-keyword">pop</span> <span class="hljs-built_in">ax</span><br>        <span class="hljs-keyword">iret</span>  <span class="hljs-comment">;前面没call就险先写iret</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">int9end:</span><span class="hljs-keyword">nop</span><br><br>code ends<br>end start<br><br></code></pre></td></tr></table></figure><hr><h2 id="实验16-编写包含多个功能子程序的中断例程"><a href="#实验16-编写包含多个功能子程序的中断例程" class="headerlink" title="实验16 编写包含多个功能子程序的中断例程"></a>实验16 编写包含多个功能子程序的中断例程</h2><hr><ul><li>安装一个新的 int 7ch 中断例程，为显示输出提供如下功能子程序。<ul><li>（1）清屏；</li><li>（2）设置前景色；</li><li>（3）设置背景色；</li><li>（4）向上滚动一行。</li></ul></li><li>入口参数说明如下：<ul><li>（1） 用 ah 寄存器传递功能号：0 表示清屏；1 表示设置前景色；2 表示设置背景色；3 表示向上滚动一行；</li><li>（2） 对于 1、2 号功能，用 al 传递颜色值，(al)∈ {0,1,2,3,4,5,6,7}。</li></ul></li></ul><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><br><span class="hljs-meta">assume</span> <span class="hljs-built_in">cs</span>:code<br><br>code <span class="hljs-meta">segment</span><br><span class="hljs-symbol">start:</span>  <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-built_in">cs</span><br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ds</span>,<span class="hljs-built_in">ax</span><br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">si</span>,offset int7c           <span class="hljs-comment">;设置ds:si指向源地址</span><br><br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">0</span><br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">es</span>,<span class="hljs-built_in">ax</span><br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">di</span>,<span class="hljs-number">200h</span>               <span class="hljs-comment">;设置es:di指向目的地址</span><br><br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">cx</span>,offset int7cend-offset int7c            <span class="hljs-comment">;cx为传输长度</span><br>        <span class="hljs-keyword">cld</span>                                            <span class="hljs-comment">;传输方向为正</span><br>        <span class="hljs-keyword">rep</span> <span class="hljs-keyword">movsb</span>                                      <span class="hljs-comment">;用movsb指令，将a的代码送入0:200处</span><br>    <br>        <span class="hljs-keyword">cli</span><br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">0</span><br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">es</span>,<span class="hljs-built_in">ax</span><br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">word</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">es</span>:[<span class="hljs-number">07ch</span>*<span class="hljs-number">4</span>],<span class="hljs-number">200h</span><br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">word</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">es</span>:[<span class="hljs-number">07ch</span>*<span class="hljs-number">4</span>+<span class="hljs-number">2</span>],<span class="hljs-number">0</span>    <span class="hljs-comment">;设置中断向量</span><br>        <span class="hljs-keyword">sti</span><br><br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">4c00h</span><br>        <span class="hljs-keyword">int</span> <span class="hljs-number">21h</span><br><span class="hljs-symbol">        </span><br><span class="hljs-symbol">int7c:</span>  <span class="hljs-keyword">jmp</span> short setscreen<br><br><span class="hljs-comment">; 这里要注意，在安装程序中的sub1是一串数据，在中断例程安装在0:200h中时 如果仍然按照第十六章那样设置，是无法成功调用子程序的，</span><br><span class="hljs-comment">; 因为主程序运行完毕以后,主程序所占的内存可能会被其他内容覆盖，所以我们要把子程序安装在中断例程之后的内存中</span><br><span class="hljs-comment">; 当然这样会存在一个问题，如果中断例程并没有安装在0:200处，则table中的值也要相应改动</span><br><span class="hljs-comment">; 至于为什么子程序中的sub1s,sub2s以及loop指令还能正常工作，是因为这是基于位移的跳转</span><br><span class="hljs-comment">; 即在主程序中，相应的loop/jmp指令已经编译为回退/前进xx字节的指令，因此不会受位置移动的影响</span><br><br>  table<span class="hljs-built_in">dw</span> sub1-int7c+<span class="hljs-number">200h</span>,sub2-int7c+<span class="hljs-number">200h</span>,sub3-int7c+<span class="hljs-number">200h</span>,sub4-int7c+<span class="hljs-number">200h</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol"> setscreen:</span><span class="hljs-keyword">push</span> <span class="hljs-built_in">bx</span><br>  <br>  <span class="hljs-keyword">cmp</span> <span class="hljs-number">ah</span>,<span class="hljs-number">3</span><span class="hljs-comment">; 判断功能号是否大于3</span><br>  <span class="hljs-keyword">ja</span> sret<br>  <span class="hljs-keyword">mov</span> <span class="hljs-built_in">bl</span>,<span class="hljs-number">ah</span><br>  <span class="hljs-keyword">mov</span> <span class="hljs-number">bh</span>,<span class="hljs-number">0</span><br>  <span class="hljs-keyword">add</span> <span class="hljs-built_in">bx</span>,<span class="hljs-built_in">bx</span><span class="hljs-comment">; 根据ah提供的功能号找到对应子程序在table中的偏移</span><br>  <br>  <span class="hljs-keyword">push</span> <span class="hljs-built_in">cs</span><br>  <span class="hljs-keyword">pop</span> <span class="hljs-built_in">ds</span><br>  <span class="hljs-keyword">call</span> <span class="hljs-built_in">word</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">bx</span>+<span class="hljs-number">200h</span>+<span class="hljs-number">2</span>]<span class="hljs-comment">; 调用</span><br><span class="hljs-symbol">  </span><br><span class="hljs-symbol">  sret:</span>   <span class="hljs-keyword">pop</span> <span class="hljs-built_in">bx</span><br>  <span class="hljs-keyword">iret</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">    sub1:</span>   <span class="hljs-keyword">push</span> <span class="hljs-built_in">bx</span>                 <span class="hljs-comment">;1号子程序,清屏</span><br>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">cx</span><br>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">es</span><br>            <span class="hljs-keyword">mov</span> <span class="hljs-built_in">bx</span>,<span class="hljs-number">0b800h</span><br>            <span class="hljs-keyword">mov</span> <span class="hljs-built_in">es</span>,<span class="hljs-built_in">bx</span><br>            <span class="hljs-keyword">mov</span> <span class="hljs-built_in">bx</span>,<span class="hljs-number">0</span><br>            <span class="hljs-keyword">mov</span> <span class="hljs-built_in">cx</span>,<span class="hljs-number">2000</span><br><span class="hljs-symbol">    sub1s:</span>  <span class="hljs-keyword">mov</span> <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">es</span>:[<span class="hljs-built_in">bx</span>],<span class="hljs-string">&#x27; &#x27;</span><br>            <span class="hljs-keyword">add</span> <span class="hljs-built_in">bx</span>,<span class="hljs-number">2</span><br>            <span class="hljs-keyword">loop</span> sub1s<br>            <span class="hljs-keyword">pop</span> <span class="hljs-built_in">es</span><br>            <span class="hljs-keyword">pop</span> <span class="hljs-built_in">cx</span><br>            <span class="hljs-keyword">pop</span> <span class="hljs-built_in">bx</span><br>            <span class="hljs-keyword">ret</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">    sub2:</span><span class="hljs-keyword">push</span> <span class="hljs-built_in">bx</span>              <span class="hljs-comment">;2号子程序,设置前景色</span><br>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">cx</span><br>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">es</span><br>            <span class="hljs-keyword">mov</span> <span class="hljs-built_in">bx</span>,<span class="hljs-number">0b800h</span><br>            <span class="hljs-keyword">mov</span> <span class="hljs-built_in">es</span>,<span class="hljs-built_in">bx</span><br>            <span class="hljs-keyword">mov</span> <span class="hljs-built_in">bx</span>,<span class="hljs-number">1</span><br>            <span class="hljs-keyword">mov</span> <span class="hljs-built_in">cx</span>,<span class="hljs-number">2000</span><br><span class="hljs-symbol">    sub2s:</span>  <span class="hljs-keyword">and</span> <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">es</span>:[<span class="hljs-built_in">bx</span>],<span class="hljs-number">11111000b</span><br>            <span class="hljs-keyword">or</span> <span class="hljs-built_in">es</span>:[<span class="hljs-built_in">bx</span>],<span class="hljs-built_in">al</span><br>            <span class="hljs-keyword">add</span> <span class="hljs-built_in">bx</span>,<span class="hljs-number">2</span><br>            <span class="hljs-keyword">loop</span> sub2s<br>            <span class="hljs-keyword">pop</span> <span class="hljs-built_in">es</span><br>            <span class="hljs-keyword">pop</span> <span class="hljs-built_in">cx</span><br>            <span class="hljs-keyword">pop</span> <span class="hljs-built_in">bx</span><br>            <span class="hljs-keyword">ret</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">    sub3:</span>   <span class="hljs-keyword">push</span> <span class="hljs-built_in">bx</span>                <span class="hljs-comment">;3号子程序,设置背景色</span><br>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">cx</span><br>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">es</span><br>            <span class="hljs-keyword">mov</span> <span class="hljs-built_in">cl</span>,<span class="hljs-number">4</span><br>            <span class="hljs-keyword">shl</span> <span class="hljs-built_in">al</span>,<span class="hljs-built_in">cl</span><br>            <span class="hljs-keyword">mov</span> <span class="hljs-built_in">bx</span>,<span class="hljs-number">0b800h</span><br>            <span class="hljs-keyword">mov</span> <span class="hljs-built_in">es</span>,<span class="hljs-built_in">bx</span><br>            <span class="hljs-keyword">mov</span> <span class="hljs-built_in">bx</span>,<span class="hljs-number">1</span><br>            <span class="hljs-keyword">mov</span> <span class="hljs-built_in">cx</span>,<span class="hljs-number">2000</span><br><span class="hljs-symbol">    sub3s:</span>  <span class="hljs-keyword">and</span> <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">es</span>:[<span class="hljs-built_in">bx</span>],<span class="hljs-number">10001111b</span><br>            <span class="hljs-keyword">or</span> <span class="hljs-built_in">es</span>:[<span class="hljs-built_in">bx</span>],<span class="hljs-built_in">al</span><br>            <span class="hljs-keyword">add</span> <span class="hljs-built_in">bx</span>,<span class="hljs-number">2</span><br>            <span class="hljs-keyword">loop</span> sub3s<br>            <span class="hljs-keyword">pop</span> <span class="hljs-built_in">es</span><br>            <span class="hljs-keyword">pop</span> <span class="hljs-built_in">cx</span><br>            <span class="hljs-keyword">pop</span> <span class="hljs-built_in">bx</span><br>            <span class="hljs-keyword">ret</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">    sub4:</span>   <span class="hljs-keyword">push</span> <span class="hljs-built_in">cx</span>            <span class="hljs-comment">;4号子程序,向上滚动一行</span><br>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">si</span><br>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">di</span><br>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">es</span><br>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">ds</span><br><br>            <span class="hljs-keyword">mov</span> <span class="hljs-built_in">si</span>,<span class="hljs-number">0b800h</span><br>            <span class="hljs-keyword">mov</span> <span class="hljs-built_in">es</span>,<span class="hljs-built_in">si</span><br>            <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ds</span>,<span class="hljs-built_in">si</span><br>            <span class="hljs-keyword">mov</span> <span class="hljs-built_in">si</span>,<span class="hljs-number">160</span><br>            <span class="hljs-keyword">mov</span> <span class="hljs-built_in">di</span>,<span class="hljs-number">0</span><br>            <span class="hljs-keyword">cld</span><br>            <span class="hljs-keyword">mov</span> <span class="hljs-built_in">cx</span>,<span class="hljs-number">24</span><br><span class="hljs-symbol">    sub4s:</span>  <span class="hljs-keyword">push</span> <span class="hljs-built_in">cx</span><br>            <span class="hljs-keyword">mov</span> <span class="hljs-built_in">cx</span>,<span class="hljs-number">160</span><br>            <span class="hljs-keyword">rep</span> <span class="hljs-keyword">movsb</span><br>            <span class="hljs-keyword">pop</span> <span class="hljs-built_in">cx</span><br>            <span class="hljs-keyword">loop</span> sub4s<br><br>            <span class="hljs-keyword">mov</span> <span class="hljs-built_in">cx</span>,<span class="hljs-number">80</span><br>            <span class="hljs-keyword">mov</span> <span class="hljs-built_in">si</span>,<span class="hljs-number">0</span><br><span class="hljs-symbol">    sub4s1:</span> <span class="hljs-keyword">mov</span> <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-number">160</span>*<span class="hljs-number">24</span>+<span class="hljs-built_in">si</span>],<span class="hljs-string">&#x27; &#x27;</span><br>            <span class="hljs-keyword">add</span> <span class="hljs-built_in">si</span>,<span class="hljs-number">2</span><br>            <span class="hljs-keyword">loop</span> sub4s1<br>            <br>            <span class="hljs-keyword">pop</span> <span class="hljs-built_in">ds</span><br>            <span class="hljs-keyword">pop</span> <span class="hljs-built_in">es</span><br>            <span class="hljs-keyword">pop</span> <span class="hljs-built_in">di</span><br>            <span class="hljs-keyword">pop</span> <span class="hljs-built_in">si</span><br>            <span class="hljs-keyword">pop</span> <span class="hljs-built_in">cx</span><br>            <span class="hljs-keyword">ret</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">int7cend:</span>  <span class="hljs-keyword">nop</span><br><br>code ends<br>end start<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>汇编</category>
      
    </categories>
    
    
    <tags>
      
      <tag>汇编</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>汇编语言检测点</title>
    <link href="/2023/05/27/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E6%A3%80%E6%B5%8B%E7%82%B9/"/>
    <url>/2023/05/27/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E6%A3%80%E6%B5%8B%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h2 id="第一章-基础知识"><a href="#第一章-基础知识" class="headerlink" title="第一章 基础知识"></a>第一章 基础知识</h2><h3 id="检测点-1-1"><a href="#检测点-1-1" class="headerlink" title="检测点 1.1"></a>检测点 1.1</h3><p><a href="https://freeimage.host/i/HrT21vs"><img src="https://iili.io/HrT21vs.md.png" alt="HrT21vs.md.png"></a></p><p>（1）<strong>13</strong></p><ul><li>寻址能力：一个CPU有N根地址线，则这个CPU的地址总线的宽度为N，最多可以寻找2的N次方个内存单元。</li><li>地址总线的宽度决定了CPU 的寻址能力。</li><li>\( 2^{N} &#x3D; 8KB &#x3D; 8*1024B &#x3D; 2^{13}B \)，N为地址总线宽度，N&#x3D;13</li></ul><p>（2）<strong>1024，0，1023</strong></p><ul><li>一个存储单元占一个字节（即1B），故1KB的存储器有1024个存储单元，存储单元编号从0~1023。</li></ul><p>（3）<strong>8192，1024</strong></p><ul><li>1千字节（KB）&#x3D; 1024字节（B）</li><li>1字节（Byte）&#x3D; 8比特（bit）</li></ul><p> （4）<strong>\( 2^{30}， 2^{20}， 2^{10}\)</strong></p><p> （5）<strong>64KB，1MB，16MB，4GB</strong></p><ul><li>8080CPU地址总线宽度为16，寻址能力为\(2^{16} &#x3D; 2^6KB &#x3D; 64KB\)</li><li>其余同理</li></ul><p>（6）<strong>1，1，2，2，4</strong></p><ul><li>8根数据总线一次可传送一个8位二进制数据（即一个字节）</li></ul><p>（7）<strong>512，256</strong></p><ul><li>8086CPU数据总线16根，一次可读2个字节 ,1024&#x2F;2&#x3D;512</li></ul><p>（8）<strong>二进制</strong></p><h2 id="第二章-寄存器"><a href="#第二章-寄存器" class="headerlink" title="第二章 寄存器"></a>第二章 寄存器</h2><h3 id="检测点-2-1"><a href="#检测点-2-1" class="headerlink" title="检测点 2.1"></a>检测点 2.1</h3><p><a href="https://freeimage.host/i/H4naDZb"><img src="https://iili.io/H4naDZb.md.png" alt="H4naDZb.md.png"></a></p><p>  (1)  有点简单，注意溢出即可，如：C5H+93H&#x3D;158H，而al只有8位，所以al&#x3D;58H，从而AX&#x3D;0058H</p><p>  (2)</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">mov</span> ax,<span class="hljs-number">2</span>     ;<span class="hljs-number">2</span>的<span class="hljs-number">1</span>次方 = <span class="hljs-number">2</span><br><span class="hljs-attribute">add</span> ax,ax    ;<span class="hljs-number">2</span>的<span class="hljs-number">2</span>次方 = <span class="hljs-number">2</span> + <span class="hljs-number">2</span> = <span class="hljs-number">4</span><br><span class="hljs-attribute">add</span> ax,ax    ;<span class="hljs-number">2</span>的<span class="hljs-number">3</span>次方 = <span class="hljs-number">4</span> + <span class="hljs-number">4</span> = <span class="hljs-number">8</span><br><span class="hljs-attribute">add</span> ax,ax    ;<span class="hljs-number">2</span>的<span class="hljs-number">4</span>次方 = <span class="hljs-number">8</span> + <span class="hljs-number">8</span> = <span class="hljs-number">16</span><br></code></pre></td></tr></table></figure><h3 id="检测点-2-2"><a href="#检测点-2-2" class="headerlink" title="检测点 2.2"></a>检测点 2.2</h3><p><a href="https://freeimage.host/i/H4pjm0v"><img src="https://iili.io/H4pjm0v.md.png" alt="H4pjm0v.md.png"></a></p><p>（1）<strong>00010H到1000FH</strong></p><ul><li>基础地址（段地址*16）+ 偏移地址 &#x3D; 物理地址</li><li>偏移地址16位，变化范围为0~FFFFH，仅用偏移地址最多可寻址64KB</li><li>给定段地址为0001H，寻址范围为（0001H×16）+ 0到（0001H×16）+FFFFH，即寻址范围为0010H到1000FH</li></ul><p>（2）<strong>最小为 1001H ，最大为 2000H</strong></p><ul><li>段地址<em>16+偏移地址&#x3D;物理地址，即SA</em>16+EA&#x3D;20000H；偏移地址16位，变化范围为0~FFFFH； </li><li>当偏移地址取最大值FFFFH时，段地址最小，SA&#x3D;(20000H-FFFFH)&#x2F;16&#x3D;1001H（<strong>取上界</strong>）</li><li>当偏移地址取最小值0H时，段地址最大，SA&#x3D;(20000H-0H)&#x2F;16&#x3D;2000H。</li></ul><p> 思考：当段地址给定为小于1001H或大于2000H时，CPU无论怎么变化偏移地址都无法寻到20000H单元。</p><h3 id="检测点-2-3"><a href="#检测点-2-3" class="headerlink" title="检测点 2.3"></a>检测点 2.3</h3><p> <a href="https://freeimage.host/i/H4pvW0u"><img src="https://iili.io/H4pvW0u.md.png" alt="H4pvW0u.md.png"></a></p><ul><li><p>一共修改了4次。</p></li><li><p>读取 mov ax,bx 指令后，第一次修改IP</p></li><li><p>读取 sub ax,ax 指令后，第二次修改IP</p></li><li><p>读取 jmp ax 指令后，第三次修改IP</p></li><li><p>执行 jmp ax 指令时，第四次修改IP，最后IP&#x3D;ax&#x3D;0</p><p><strong>略了，有时间再补，最近期末复习时间太紧了</strong></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>汇编</category>
      
    </categories>
    
    
    <tags>
      
      <tag>汇编</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>汇编语言知识点复习</title>
    <link href="/2023/05/27/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%9F%A5%E8%AF%86%E7%82%B9%E5%A4%8D%E4%B9%A0/"/>
    <url>/2023/05/27/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%9F%A5%E8%AF%86%E7%82%B9%E5%A4%8D%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p><a href="https://freeimage.host/i/H4BEW1R"><img src="https://iili.io/H4BEW1R.md.jpg" alt="H4BEW1R.md.jpg"></a></p><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><ul><li><p><strong>使用debug ××.exe调试时，首次进入调试界面时，寄存器CX中存放的是可执行文件长度。</strong></p></li><li><p>inc bx 等价于add bx,1</p></li><li><p>XOR操作是一种逻辑运算符，用于执行异或操作，英文全称是 exclusive or。XOR 操作的结果是两个二进制位相同则结果为 0，否则结果为 1。例如 XOR AX, AX 可以将 AX 寄存器中的值清零。</p></li><li><p>在汇编源程序中，数据不能以字母开头</p></li><li><p>遇到loop指令时，使用P命令来执行。Debug就会自动重复执行循环中的指令，直到(cx)&#x3D;0为止</p></li><li><p>DOSBOX中，int 21 后面要用 p 指令来结束。</p></li><li><p>dw 0123h,0456h,0789h,0abch,0defh,0fedh,0cbah,0987h</p><ul><li><strong>“dw”</strong>的含义是定义字型数据。dw即“define word”。</li><li>在这里，使用dw定义了8个字型数据（数据之间以逗号分隔），它们所占的内存空间的大小为16个字节</li></ul></li><li><p>db 字节型，dd双字型</p></li><li><p>通过<strong>DS&#x3D;0B2D</strong>，可以知道程序从<strong>0B3D:0000</strong>开始存放</p></li><li><p>NOT 实现按位取反，例如(AL)&#x3D;00010010B，则 NOT AL 使得（AL）&#x3D;11101101B。XOR 为异或运算。</p></li><li><p><strong>var dd 252 dup(10)</strong></p><ul><li>var dd 252 dup(10) 是一种伪指令，用于在汇编语言中定义一个名为 var 的变量，并初始化它为重复出现的值。</li><li>根据这个伪指令的语法，252 是要重复的次数，dup(10) 表示要重复的值为 10。因此，该指令的作用是将值为 10 的双字型数据重复 252 次，然后存储到名为 var 的变量中。</li></ul></li><li><p>VAR3 DB ‘HOW ARE YOU?’,’$’，，，VAR3 &#x3D; 13 字节 (12 + 1)</p></li><li><p>VAR2 DW 5DUP(?),0，，，，，VAR2 &#x3D; 12 字节 (5 * 2 + 2)</p></li><li><p>段地址（SA）Segment Address 和 偏移地址（EA）Effective Address</p></li><li><p>要用八位二进制表示 -9 的补码，可以按照以下步骤进行计算：</p><ul><li>将 -9 的<strong>绝对值</strong>转换为二进制。9 的二进制表示为 00001001。</li><li>获取 9 的反码。即将二进制数的每一位取反，得到 11110110。</li><li>将反码加 1 得到补码。在这种情况下，11110110 + 1 &#x3D; 11110111。</li><li>因此，-9 在八位二进制补码表示中为 11110111。十六进制为F7</li></ul></li><li><p>dec bx      ;dec指令和inc指令的功能相反，dec bx 进行操作为：(bx) &#x3D; (bx) - 1</p></li><li><p><strong>mul是乘法指令</strong>，使用 mul 做乘法的时候：</p><ul><li>相乘的两个数：要么都是8位，要么都是16位。<ul><li>8 位：一个默认放在 AL中 ，另一个放在 8位寄存器或内存字节单元中；</li><li>16 位： 一个默认放在AX中，另一个放在16 位寄存器或内存字单元中。</li></ul></li><li>结果<ul><li>8位：AX中；</li><li>16位：DX（高位）和AX（低位）中。</li></ul></li><li>格式如下：<ul><li>mul reg</li><li>mul 内存单元</li></ul></li><li>比如：mul byte ptr ds:[0]<ul><li>含义为： (ax)&#x3D;(al) * ((ds) * 16+0)</li></ul></li><li>mul word ptr [bx+si+8]<ul><li>含义为： </li><li>(ax)&#x3D;(ax) * ((ds) * 16+(bx)+(si)+8)结果的低16位；</li><li>(dx)&#x3D;(ax) * ((ds) * 16+(bx)+(si)+8)结果的高16位；</li></ul></li></ul></li><li><p>小写字母的ASCII码范围61H-7AH </p></li><li><p>一般情况下： 从<strong>0000:0200至0000:02FF</strong>的256个字节的空间所对应的中断向量表项都是空的，操作系统和其他应用程序都不占用</p></li><li><p>(IP) &#x3D; 5，说明 ss:sp &#x3D; 5，</p></li></ul><h2 id="第1章-基础知识"><a href="#第1章-基础知识" class="headerlink" title="第1章 基础知识"></a>第1章 基础知识</h2><hr><h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><ol><li><p>每一种微处理器，由于硬件设计和内部结构的不同，就需要用不同的电平脉冲来控制，使它工作。所以每一种微处理器都有自己的机器指令集，也就是机器语言。</p></li><li><p>汇编语言的主体是汇编指令。</p></li><li><p>汇编指令和机器指令的差别在于指令的表示方法上，汇编指令是机器指令便于记忆的书写格式。汇编指令是机器指令的助记符。</p></li><li><p>汇编语言由以下3类指令组成：</p><ol><li>汇编指令：机器码的助记符，有对应的机器码。</li><li>伪指令：由编译器执行，没有对应的机器码，计算机并不执行。</li><li>其他符号：如+、-、*、&#x2F;等，由编译器识别，没有对应的机器码。</li></ol></li><li><p>CPU要想进行数据的读写，必须和外部器件（标准的说法是芯片）进行三类信息的交互：</p><ol><li>存储单元的地址（地址信息）；</li><li>器件的选择，读或写命令（控制信息）；</li><li>读或写的数据（数据信息）。</li></ol></li><li><p>CPU是通过<strong>地址总线</strong>来指定存储器单元的。地址总线上能传送多少个不同的信息，CPU就可以对多少个存储单元进行寻址。</p></li><li><p>CPU与内存或其它器件之间的数据传送是通过<strong>数据总线</strong>来进行的。数据总线的宽度决定了CPU和外界的数据传送速度。</p></li><li><p>8088CPU数据总线宽度为8，<strong>8086CPU</strong>数据总线宽度为16。</p></li><li><p><strong>控制总线</strong>：有多少根控制总线，就意味着CPU提供了对外部器件的多少种控制。所以，控制总线的宽度决定了CPU对外部器件的控制能力。</p></li></ol><ul><li><input checked="" disabled="" type="checkbox"> 前面所讲的内存读或写命令是由几根控制线综合发出的：其中有一根名为读信号输出控制线负责由CPU 向外传送读信号，CPU 向该控制线上输出<strong>低电平</strong>表示将要读取数据；</li></ul><ol start="10"><li><p>b：bit，B：Byte </p></li><li><p>1B &#x3D; 8b，1KB &#x3D; 1024B，1MB &#x3D; 1024KB，1GB &#x3D; 1024MB </p></li><li><p>将各类存储器看作一个逻辑存储器： 所有的物理存储器被看作一个由若干存储单元组成的逻辑存储器；每个物理存储器在这个逻辑存储器中占有一个地址段，即一段地址空间； CPU在这段地址空间中读写数据，实际上就是在相对应的物理存储器中读写数据。</p></li><li><p>8086PC机的内存地址空间分配：<a href="https://freeimage.host/cn"><img src="https://iili.io/H4BhK0b.png" alt="H4BhK0b.png"></a></p></li><li><p>图 1.9 告诉我们，从地址 0 ~ 9FFFF 的内存单元中读取数据，实际上就是在读取主随机存储器中的数据；向地址 A0000 ~ BFFFF 的内存单元中写数据，就是向显存中写入数据,这些数据会被显示卡输出到显示器上；我们向地址 CO00O ~ FFFFF 的内存单元中写入数据的操作是<em>无效的</em>，因为这等于改写只读存储器中的内容。</p></li><li><p>内存地址空间：最终运行程序的是CPU，我们用汇编编程的时候，必须要从CPU角度考虑问题。  对CPU来讲，系统中的所有存储器中的存储单元都处于一个统一的逻辑存储器中，它的容量受CPU寻址能力的限制。这个逻辑存储器即是我们所说的<em>内存地址空间</em>。😭</p></li></ol><h2 id="第2章-寄存器"><a href="#第2章-寄存器" class="headerlink" title="第2章 寄存器"></a>第2章 寄存器</h2><hr><h3 id="基础概念-1"><a href="#基础概念-1" class="headerlink" title="基础概念"></a>基础概念</h3><ol><li><p>8086CPU有14个寄存器，它们的名称为：AX、BX、CX、DX、SI、DI、SP、BP、IP、CS、SS、DS、ES、PSW。</p><blockquote><p>AX：accumulator register，累加器寄存器</p><p>BX： base register，基数寄存器</p><p>CX： count register，计数寄存器 </p><p>DX：data register，通用数据寄存器</p><p>SI：source index，源变址寄存器</p><p>DI：destination index，目的变址寄存器</p><p>SP：stack pointer，堆栈指针寄存器</p><p>BP：base pointer，基址指针寄存器，指示堆栈段中一个数据区的基址位置，通常与SS配对</p><p>IP：instruction pointer，码段地址指针寄存器</p><p>CS：code segment，代码段寄存器</p><p>SS：stack segment，堆栈段~，存放当前堆栈段的段地址，一般和SP连用</p><p>DS：data segment，数据段~，存放当前数据段的段地址</p><p>ES：extra segment，附加段~</p><p>PSW：program state word，标志~</p></blockquote></li><li><p>8086CPU所有的寄存器都是16位的，可以存放两个字节。</p></li><li><p>AX、BX、CX、DX 通常用来存放一般性数据，被称为通用寄存器。</p></li><li><p>一个16位寄存器所能存储的数据的最大值为多少？<br>   答案：2^16-1&#x3D;65535。</p></li><li><p>汇编指令不区分大小写。</p></li><li><p>8086有20位地址总线，可传送20位地址，寻址能力为1M。</p></li><li><p>地址加法器如何完成段地址×16的运算？就是将以二进制形式存放的段地址左移4位。</p></li><li><p>“段地址×16+偏移地址&#x3D;物理地址”的本质含义是： CPU 在访问内存时，用一个基础地址(段地址x16)和一个相对于基础地址的偏移地址相加，给出内存单元的物理地址。</p></li><li><p>有两点需要注意：段地址✖16 必然是 16 的倍数，所以一个段的起始地址也一定是 16 的倍数；偏移地址为 16 位，16 位地址的寻址能力为 64KB，所以<em>一个段的长度最大为 64KB</em>。</p></li><li><p>CS和IP是8086CPU中最关键的寄存器，它们指示了CPU当前要读取指令的地址。</p></li><li><p>8086PC工作过程的简要描述</p><ol><li>从CS:IP指向内存单元读取指令，读取的指令进入指令缓冲器；</li><li>IP &#x3D; IP + 所读取指令的长度，从而指向下一条指令；</li><li>执行指令。 转到步骤 （1），重复这个过程。</li></ol></li><li><p><strong>mov指令不能用于设置CS、IP的值，8086CPU没有提供这样的功能。</strong></p></li></ol><h2 id="第3章-寄存器（内存访问）"><a href="#第3章-寄存器（内存访问）" class="headerlink" title="第3章 寄存器（内存访问）"></a>第3章 寄存器（内存访问）</h2><hr><h3 id="基础概念-2"><a href="#基础概念-2" class="headerlink" title="基础概念"></a>基础概念</h3><ol><li>8086CPU不支持将数据直接送入段寄存器的操作，ds是一个段寄存器。（硬件设计的问题）</li></ol><ul><li>mov ds,1000H 是非法的。</li><li>数据 → 一般的寄存器 → 段寄存器</li></ul><ol start="2"><li><p><strong>字在内存中存储时 ，要用两个地址连续的内存单元来存放，字的低位字节存放在低地址单元中，高位字节存放再高地址单元中。</strong></p></li><li><p>合法格式：</p></li></ol><ul><li>mov 寄存器，寄存器&#x2F;内存单元&#x2F;段寄存器&#x2F;立即数</li><li>mov 内存单元，寄存器&#x2F;段寄存器&#x2F;立即数</li><li>mov 段寄存器，寄存器&#x2F;内存单元<br>~注意：</li><li>mov指令中的目的操作数不能是立即数、IP和CS寄存器；</li><li>mov指令中不允许在两个存储单元之间直接传送数据；</li><li>mov指令中不允许在两个段寄存器之间直接传送数据；</li><li>mov指令中立即数不能直接传送给段寄存器（CS、DS、SS、ES）。</li></ul><ol start="4"><li>栈：</li></ol><ul><li><p>8086CPU提供了栈操作机制，方案如下：在SS，SP中存放栈顶的段地址和偏移地址；提供入栈和出栈指令，他们根据SS:SP指示的地址，按照栈的方式访问内存单元。</p></li><li><p><strong>push指令的执行步骤</strong>：</p><ol><li>SP&#x3D;SP-2；</li><li>向SS:SP指向的字单元中送入数据。</li></ol></li><li><p><strong>pop指令的执行步骤</strong>：</p><ol><li>从SS:SP指向的字单元中读取数据；</li><li>SP&#x3D;SP+2。</li></ol></li><li><p>任意时刻，SS:SP指向栈顶元素。</p></li><li><p>8086CPU只记录栈顶，栈空间的大小我们要自己管理。</p></li><li><p>用栈来暂存以后需要恢复的寄存器的内容时 ，寄存器出栈的顺序要和 入栈的顺序相反。</p></li><li><p>push、pop实质上是一种内存传送指令，注意它们的灵活应用。</p></li></ul><ol start="5"><li><p>一个栈段的容量最大为64KB。</p></li><li><p>如果我们将10000H~1FFFFH这段空间当作栈段，初始状态是空的，此时，SS&#x3D;1000H，SP&#x3D;？、、、答案：0，（SP原来为FFFEH，加2后SP&#x3D;0，所以，当栈为空的时候，SS&#x3D;1000H，SP&#x3D;0。）</p></li><li><p><strong>我们可以将一段内存定义为一个段，用一个段地址指示段，用偏移地址访问段内的单元。这完全是我们自己的安排。</strong></p><ul><li>我们可以用一个段存放数据，将它定义为“数据段”</li><li>我们可以用一个段存放代码，将它定义为“代码段”</li><li>我们可以用一个段当作栈，将它定义为“栈段”</li></ul><p> 我们可以这样安排，但若要让CPU按照我们的安排来访问这些段，就要：</p><ul><li>对于数据段，将它的段地址放在 DS中，用mov、add、sub等访问内存单元的指令时，CPU就将我们定义的数据段中的内容当作数据来访问；</li><li>对于代码段，将它的段地址放在 CS中，将段中第一条指令的偏移地址放在IP中，这样CPU就将执行我们定义的代码段中的指令；</li><li>对于栈段，将它的段地址放在SS中，将栈顶单元的偏移地置放在 SP 中，这样CPU在需要进行栈操作的时候，比如执行 push、pop 指令等，就将我们定义的栈段当作栈空间来用。</li><li>可见，不管我们如何安排 ，CPU 将内存中的某段内存当作代码 ，是因为CS:IP指向了那里；CPU将某段内存当作栈 ，是因为 SS:SP 指向了那里。</li></ul></li></ol><h2 id="第4章-第一个程序"><a href="#第4章-第一个程序" class="headerlink" title="第4章 第一个程序"></a>第4章 第一个程序</h2><hr><h3 id="基础概念-3"><a href="#基础概念-3" class="headerlink" title="基础概念"></a>基础概念</h3><ol><li><p>DOS系统中.EXE文件中的程序的加载过程：<br><a href="https://freeimage.host/i/H6suidv"><img src="https://iili.io/H6suidv.md.png" alt="H6suidv.md.png"></a></p></li><li><p>程序加载后，ds中存放着程序所在内存区的段地址，这个内存区的偏移地址为 0 ，则<strong>程序所在的内存区的地址为：ds:0</strong>；这个内存区的前256 个字节中存放的是PSP，dos用来和程序进行通信。 从 256字节处向后的空间存放的是程序。</p></li><li><p>所以，我们从ds中可以得到PSP的段地址SA，PSP的偏移地址为 0，则物理地址为SA×16+0。因为PSP占256（100H）字节，所以<strong>程序的物理地址</strong>是：<em>SA×16+0+256&#x3D; SA×16+16×16&#x3D;（SA+16）×16+0</em>可用段地址和偏移地址表示为：<strong>SA+10:0</strong>。</p><ul><li>如：DS&#x3D;129E，则PSP的的地址为129E:0，程序的地址为12AE:0。</li></ul></li><li><p>一个源程序从写出到执行的过程：<strong>编写、编译、连接、执行</strong>（使用汇编语言编译程序对源程序文件中的源程序进行编译，产生目标文件；再用连接程序对目标文件进行连接，生成可在操作系统中直接运行的可执行文件。）</p></li><li><p>说明<strong>伪指令和汇编指令的区别</strong>：汇编指令是有对应的机器码的指令，可以被编译为机器指令，最终为CPU所执行。而伪指令没有对应的机器指令，最终不被CPU所执行，是由编译器来执行的。</p></li><li><p>说明汇编语言程序中<strong>标号的作用</strong>：汇编源程序中一个标号指代了一个地址，比如codesg在segment的前面，作一个段的名称，这个段的名称最终将被编译、连接程序处理为一个段的段地址。</p></li></ol><h2 id="第5章-bx-和loop指令"><a href="#第5章-bx-和loop指令" class="headerlink" title="第5章 [bx]和loop指令"></a>第5章 [bx]和loop指令</h2><hr><h3 id="基础概念-4"><a href="#基础概念-4" class="headerlink" title="基础概念"></a>基础概念</h3><ol><li><p>描述性符号“()”，例如：对于push ax的功能，我们可以这样来描述：</p><ul><li>(sp) &#x3D; (sp)-2 </li><li>((ss) * 16＋(sp))&#x3D;(ax)</li></ul></li><li><p>(2000:0)、((ds):1000H)等是错误的用法</p></li><li><p>(ax)、(ds)、(al)、(2000H)、((ds) * 16+(bx))等是正确的用法</p></li><li><p>指令的格式是：loop 标号，CPU 执行loop指令的时候，要进行两步操作：</p><ol><li>(cx)&#x3D;(cx)-1；</li><li>判断cx中的值，不为零则转至标号处执行程序，如果为零则向下执行。</li></ol></li><li><p>ffff:0006 单元中的数是一个字节型的数据，范围在0~255之间</p></li><li><p><strong>我们在Debug中写过类似的指令：<code>mov ax,[0]</code> 表示将ds:0处的数据送入ax中。但是在汇编源程序中，指令<code>mov ax,[0]</code>被编译器当作指令<code>mov ax,0</code>处理。</strong></p></li><li><p>为防止上述情况发生，在源程序中，可采用两种方法访问2000:0单元：</p></li></ol><ul><li><p>方法一： </p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">2000h</span> <br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ds</span>,<span class="hljs-built_in">ax</span> <br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">bx</span>,<span class="hljs-number">0</span> <br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>,[<span class="hljs-built_in">bx</span>]<br></code></pre></td></tr></table></figure></li><li><p>方法二：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">2000h</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ds</span>,<span class="hljs-built_in">ax</span>    <br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>,<span class="hljs-built_in">ds</span>:[<span class="hljs-number">0</span>]                 一般用第二种方法<br></code></pre></td></tr></table></figure></li></ul><ol start="8"><li><p>DOS方式下，一般情况， 0:200 ~ 0:2FF 空间中没有系统或其他程序的数据或代码；以后，我们需要直接向一段内存中写入内容时，就使用0:200 ~ 0:2FF这段空间。</p></li><li><p>利用栈对CX寄存器内容进行保护push和恢复pop可以实现多重loop循环。如：</p></li></ol><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">mov</span> <span class="hljs-built_in">cx</span>, m<br><span class="hljs-symbol">s1:</span>          <span class="hljs-comment">;循环体1</span><br> <span class="hljs-keyword">push</span> <span class="hljs-built_in">cx</span><br> <span class="hljs-keyword">mov</span> <span class="hljs-built_in">cx</span>,n<br><span class="hljs-symbol">s2:</span>          <span class="hljs-comment">;循环体2</span><br> <span class="hljs-keyword">loop</span> s2<br> <span class="hljs-keyword">pop</span> <span class="hljs-built_in">cx</span><br> <span class="hljs-keyword">loop</span> s1<br></code></pre></td></tr></table></figure><h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><ol><li>将内存ffff:0<del>ffff:b段单元中的数据拷贝到 0:200</del>0:20b单元中。</li></ol><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">assume</span> <span class="hljs-built_in">cs</span>:code<br><br>code <span class="hljs-meta">segment</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">start:</span>  <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,offffh<br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ds</span>,<span class="hljs-built_in">ax</span><br><br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">0020h</span><br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">es</span>,<span class="hljs-built_in">ax</span><br><br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">bx</span><br><br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">cx</span>,<span class="hljs-number">12</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">    s:</span>  <span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>,<span class="hljs-built_in">ds</span>:[<span class="hljs-built_in">bx</span>]<br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">es</span>:[<span class="hljs-built_in">bx</span>],<span class="hljs-built_in">al</span>    <span class="hljs-comment">;al作为中转寄存器</span><br><br>        <span class="hljs-keyword">inc</span> <span class="hljs-built_in">bx</span><br>        <span class="hljs-keyword">loop</span> s<br>        <br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">4c00h</span><br>        <span class="hljs-keyword">int</span> <span class="hljs-number">21h</span><br><br>code ends<br>end start<br><br></code></pre></td></tr></table></figure><ol start="2"><li>编写程序片断，利用 loop 指令，实现斐波那契数列前 9 个数字 1、1、2、3、5、8、13、21、34 的求和，并将求和结果保存到内存字单元 0:200 中</li></ol><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">assume</span> <span class="hljs-built_in">cs</span>:code<br>code <span class="hljs-meta">segment</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">start:</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">0</span>    <span class="hljs-comment">;ax中的值依次为1、1、2、3、5、8、13、21、34      </span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">bx</span>,<span class="hljs-number">1</span><br> <span class="hljs-keyword">mov</span> <span class="hljs-built_in">dx</span>,<span class="hljs-number">0</span>    <span class="hljs-comment">;来存最后的计算结果</span><br> <span class="hljs-keyword">mov</span> <span class="hljs-built_in">cx</span>,<span class="hljs-number">9</span>    <span class="hljs-comment">;循环次数</span><br><span class="hljs-symbol"> s:</span><span class="hljs-keyword">push</span> <span class="hljs-built_in">bx</span><br><span class="hljs-keyword">add</span> <span class="hljs-built_in">bx</span>,<span class="hljs-built_in">ax</span><br> <span class="hljs-keyword">pop</span> <span class="hljs-built_in">ax</span><br> <span class="hljs-keyword">add</span> <span class="hljs-built_in">dx</span>,<span class="hljs-built_in">ax</span><br><br> <span class="hljs-keyword">loop</span> s<br> <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">0</span><br> <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ds</span>,<span class="hljs-built_in">ax</span><br> <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ds</span>:[<span class="hljs-number">200h</span>],<span class="hljs-built_in">dx</span><br> <br> <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">4c00h</span><br> <span class="hljs-keyword">int</span> <span class="hljs-number">21h</span><br><br>code ends<br>end start<br><br></code></pre></td></tr></table></figure><h2 id="第6章-包含多个段的程序"><a href="#第6章-包含多个段的程序" class="headerlink" title="第6章 包含多个段的程序"></a>第6章 包含多个段的程序</h2><hr><h3 id="基础概念-5"><a href="#基础概念-5" class="headerlink" title="基础概念"></a>基础概念</h3><ol><li><p>我们在源程序中用伪指令 “assume cs:code,ds:data,ss:stack”将cs、ds和ss分别和code、data、stack段相连。这样做了之后，CPU是否就会将 cs指向ode，ds 指向 data，ss 指向stack，从而按照我们的意图来处理这些段呢？</p></li><li><p>当然也不是，要知道 assume 是伪指令，是由编译器执行的，也是仅在源程序中存在的信息，CPU并不知道它们。我们不必深究 assume 的作用，只要知道需要用它将你定义的具有一定用途的段和相关的寄存器联系起来就可以了。 </p></li><li><p>若要CPU按照我们的安排行事，就要用机器指令控制它，源程序中的汇编指令是CPU要执行的内容。</p></li><li><p>总之，CPU到底如何处理我们定义的段中的内容，是当作指令执行，当作数据访问，还是当作栈空间，完全是靠程序中具体的汇编指令，和汇编指令对CS:IP、SS:SP、DS等寄存器的设置来决定的。</p></li></ol><h2 id="第7章-更灵活的定位内存地址的的方法"><a href="#第7章-更灵活的定位内存地址的的方法" class="headerlink" title="第7章 更灵活的定位内存地址的的方法"></a>第7章 更灵活的定位内存地址的的方法</h2><hr><h3 id="基础概念-6"><a href="#基础概念-6" class="headerlink" title="基础概念"></a>基础概念</h3><ol><li><p>（1）and 指令：逻辑与指令，按位进行与运算。（2）or 指令：逻辑或指令，按位进行或运算。</p></li><li><p>在ASCII编码方案中，用61H 表示“a”，62H表示“b”。用41H 表示“A”，42H表示“B”。</p></li><li><p>就ASCII码的二进制形式来看，除第5位（位数从0开始计算）外，大写字母和小写字母的其他各位都一样。大写字母ASCII码的第5位（位数从0开始计算）为0，小写字母的第5位为1。</p></li><li><p>or al,00100000b        ;将al中的ASCII码的第5位置为1，变为小写字母</p></li><li><p>and al,11011111b      ;将al中的ASCII码的第5位置为0，变为大写字母</p><ul><li><strong>and byte ptr [si],11011111b</strong>，等到了后面就是这样了</li></ul></li><li><p>指令<strong>mov ax,[bx+200]也可以写成如下格式（常用）</strong>：</p><ul><li>mov ax,[200+bx]</li><li><strong>mov ax,200[bx]</strong></li><li>mov ax,[bx].200</li></ul></li><li><p>SI(source index register)和DI(destination index register)是8086CPU中和bx功能相近的寄存器，<strong>SI和DI不能够分成两个8 位寄存器来使用</strong>。</p></li><li><p>指令mov ax,[bx+si]的数学化的描述为：(ax)&#x3D;( (ds) * 16+(bx)+(si) )。<br> 该指令也可以写成如下格式（常用）：mov ax,[bx][si]</p></li><li><p>指令mov ax,[bx+si+200]，该指令也可以写成如下格式（常用）：</p><ul><li>mov ax,[bx+200+si] </li><li>mov ax,[200+bx+si]</li><li>mov ax,200[bx][si]</li><li>mov ax,[bx].200[si]</li><li>mov ax,[bx][si].200</li></ul></li></ol><h2 id="第8章-数据处理的两个基本问题"><a href="#第8章-数据处理的两个基本问题" class="headerlink" title="第8章 数据处理的两个基本问题"></a>第8章 数据处理的两个基本问题</h2><hr><h3 id="基础概念-7"><a href="#基础概念-7" class="headerlink" title="基础概念"></a>基础概念</h3><ol><li><p>我们将使用reg来表示一个寄存器，用sreg表示一个段寄存器。reg的集合包括：ax、bx、cx、dx、ah、al、bh、bl、ch、cl、dh、dl、sp、bp、si、di；sreg的集合包括：ds、ss、cs、es。</p></li><li><p>在8086CPU 中，只有这4个寄存器（bx、bp、si、di）可以用在“[…]” 中来进行内存单元的寻址。</p></li><li><p>在“[…]” 中，这4个寄存器（bx、bp、si、di）可以单个出现，或只能以四种组合出现：bx和si、bx和di、bp和si、bp和di</p></li><li><p><strong>只要在[…]中使用寄存器bp，而指令中没有显性的给出段地址，段地址就默认在ss中</strong>。</p></li><li><p>mov ax,1 对应机器码：B80100；mov ax,076a的机器码？B86A07</p></li><li><p>在没有寄存器名存在的情况下，用操作符<strong>X ptr</strong>指明内存单元的长度，X在汇编指令中可以为word或byte。</p></li><li><p>push指令只进行字操作</p></li><li><p>div是除法指令，使用div作除法的时候：</p><ul><li>除数：8位或16位，在寄存器或内存单元中</li><li>被除数：（默认）放在AX 或 DX（高16位）和AX（低16位）中</li><li>结果：如果除数为 8位，商：AL，余数：AH；<strong>如果除数为16位，商：AX，余数：DX</strong>；</li></ul></li><li><p>div指令格式： div reg div 内存单元</p></li><li><p>div byte ptr ds:[0]</p><ul><li>含义为：(al)&#x3D;(ax)&#x2F;((ds) * 16+0)的商；</li><li>(ah)&#x3D;(ax)&#x2F;((ds) * 16+0)的余数</li></ul></li><li><p>div word ptr [bx+si+8]</p><ul><li>含义为：(ax)&#x3D;[(dx) * 10000H+(ax)]&#x2F;((ds) * 16+(bx)+(si)+8)的商；</li><li>(dx)&#x3D;[(dx) * 10000H+(ax)]&#x2F;((ds) * 16+(bx)+(si)+8)的余数</li></ul></li><li><p>dd 1，数据为00000001H，占2个字；</p></li><li><p><strong>dup</strong>是一个操作符，在汇编语言中同db、dw、dd 等一样，也是由编译器识别处理的符号。 它是和db、dw、dd 等数据定义伪指令配合使用的，用来进行数据的重复。</p><ul><li>db 3 dup (0) 定义了3个字节，它们的值都是0，相当于 db 0,0,0</li><li>db 3 dup (0,1,2)定义了9个字节，它们是0、1、2、0、1、2、0、1、2，相当于 db 0,1,2,0,1,2,0,1,2</li><li>db 3 dup (‘abc’,’ABC’)定义了18个字节，它们是‘abcABCabcABCabcABC’，相当于db ‘abcABCabcABCabcABC’</li></ul></li></ol><h2 id="第9章-转移指令的原理"><a href="#第9章-转移指令的原理" class="headerlink" title="第9章 转移指令的原理"></a>第9章 转移指令的原理</h2><hr><h3 id="基础概念-8"><a href="#基础概念-8" class="headerlink" title="基础概念"></a>基础概念</h3><ol><li><p>jmp指令要给出两种信息： 转移的目的地址， 转移的距离（段间转移jmp far、段内短转移jmp short，段内近转移jmp near）</p></li><li><p><strong>jmp short 标号</strong>（转到标号处执行指令）这种格式的 jmp 指令实现的是<strong>段内短转移，它对IP的修改范围为 -128~127</strong>，也就是说，它向前转移时可以最多越过128个字节，向后转移可以最多越过127个字节。</p></li><li><p>在“jmp short 标号”指令所对应的机器码中，并不包含转移的目的地址，而<strong>包含的是转移的位移</strong>。 这个位移，是编译器根据汇编指令中的“标号”计算出来的。</p></li><li><p>实际上，指令“jmp short 标号”的功能为(IP)&#x3D;(IP)+8位位移。</p><ul><li><strong>8位位移&#x3D;“标号”处的地址-jmp指令后的第一个字节的地址</strong>；</li><li>short指明此处的位移为8位位移；</li><li>8位位移的范围为-128~127，用补码表示。</li><li>8位位移由编译程序在编译时算出。</li></ul></li><li><p><strong>jmp near ptr</strong> 标号它实现的时<strong>段内近转移</strong>。<strong>IP修改范围为：-32768~32767</strong>。</p></li><li><p>指令 <strong>jmp far ptr</strong> 标号 实现的是<strong>段间转移，又称为远转移</strong>。far ptr指明了指令用标号的段地址和偏移地址修改CS和IP。IP修改范围：随意。</p></li><li><p>jmp far ptr s所对应的机器码：EA 0B 01 BD 0B ，其中包含转移的目的地址</p></li><li><p>转移地址在内存中的jmp指令有两种格式：</p><ul><li>jmp word ptr 内存单元地址（段内转移）<ul><li>功能：从内存单元地址处开始存放着一个字，是转移的目的偏移地址。</li></ul></li><li>jmp dword ptr 内存单元地址（段间转移）<ul><li>功能：从内存单元地址处开始存放着两个字，<strong>高地址处的字是转移的目的段地址，低地址处是转移的目的偏移地址</strong>。</li><li>(CS)&#x3D;(内存单元地址+2)</li><li>(IP)&#x3D;(内存单元地址)</li><li>内存单元地址可用寻址方式的任一格式给出。</li></ul></li></ul></li><li><p>jcxz指令（jump if cx equals zero）为有条件转移指令，<strong>所有的有条件转移指令都是短转移</strong>，在对应的机器码中包含转移的位移，而不是目的地址。对IP的修改范围都为-128~127。<strong>指令格式：jcxz 标号 （如果(cx)&#x3D;0，则转移到标号处执行。）</strong></p></li><li><p>jcxz 标号 指令操作：</p><ul><li>当(cx)&#x3D;0时，(IP)&#x3D;(IP)+8位位移）<ul><li><strong>8位位移&#x3D;“标号”处的地址-jcxz指令后的第一个字节的地址；</strong></li><li>8位位移的范围为-128~127，用补码表示；</li><li>8位位移由编译程序在编译时算出。</li></ul></li><li>当(cx)不为0时，什么也不做（程序向下执行）。</li></ul></li><li><p>loop指令为循环指令，<strong>所有的循环指令都是短转移</strong>，在对应的机器码中包含转移的位移，而不是目的地址。对IP的修改范围都为-128~127。指令格式：loop 标号</p></li></ol><h2 id="第10章-CALL和RET指令"><a href="#第10章-CALL和RET指令" class="headerlink" title="第10章 CALL和RET指令"></a>第10章 CALL和RET指令</h2><hr><h3 id="基础概念-9"><a href="#基础概念-9" class="headerlink" title="基础概念"></a>基础概念</h3><ol><li><p>ret指令用栈中的数据，修改IP的内容，从而实现近转移；</p><ul><li>CPU执行ret指令时，相当于进行：pop IP</li></ul></li><li><p>retf指令用栈中的数据，修改CS和IP的内容，从而实现远转移；</p><ul><li>CPU执行retf指令时，相当于进行：<ul><li>pop IP（<strong>注意！这是违法的，只是效果</strong>）</li><li>pop CS</li></ul></li></ul></li><li><p>CPU执行call指令，进行两步操作：</p><ul><li>将当前的 IP 或 CS 和 IP 压入栈中；</li><li>转移。</li></ul></li><li><p>CPU 执行指令“call 标号”时，相当于进行：</p><ul><li>push IP</li><li>jmp near ptr 标号</li></ul></li><li><p>call s 在指令缓冲器时，IP已经改变了，指向了下一条指令，suoooooo以，<strong>call指令指向时将下一条指令的IP入栈</strong> 。</p></li><li><p>CPU 执行指令 “call far ptr 标号”时，相当于进行：</p><ul><li>push CS</li><li>push IP</li><li>jmp far ptr 标号</li></ul></li><li><p>CPU执行call 16位reg时，相当于进行：</p><ul><li>push IP </li><li>jmp 16位寄存器</li></ul></li><li><p>call word ptr 内存单元地址， 汇编语法解释：</p><ul><li>push CS</li><li>push IP</li><li>jmp dword ptr 内存单元地址</li></ul></li><li><p>call dword ptr 内存单元地址， 汇编语法解释：</p><ul><li>push CS</li><li>push IP</li><li>jmp dword ptr 内存单元地址</li></ul></li></ol><h2 id="第11章-标志寄存器"><a href="#第11章-标志寄存器" class="headerlink" title="第11章 标志寄存器"></a>第11章 标志寄存器</h2><hr><h3 id="基础概念-10"><a href="#基础概念-10" class="headerlink" title="基础概念"></a>基础概念</h3><ol><li><p>flag的第6位是<strong>ZF（zero flag），零标志位</strong>。它记录相关指令执行后，其结果是否为0</p><ul><li>结果为0 ，ZF &#x3D; 1</li><li>结果不为0，ZF &#x3D; 0</li></ul></li><li><p>在8086CPU的指令集中，有的指令的执行是影响标志寄存器的，比如：<strong>add、sub、mul、div、inc、or、and</strong>等，它们大都是运算指令（进行逻辑或算术运算）；有的指令的执行对标志寄存器没有影响，比如：mov、push、pop等，它们大都是传送指令。</p></li><li><p>flag的第2位是<strong>PF，奇偶标志位</strong>。它记录指令执行后，结果的所有<strong>二进制位（低8位）中</strong>1的个数：</p><ul><li>为偶数，PF &#x3D; 1；</li><li>为奇数，PF &#x3D; 0。</li></ul></li><li><p>flag的第7位是<strong>SF，符号标志位</strong>。它记录指令执行后，其结果是否为负</p><ul><li>结果为负，SF &#x3D; 1；</li><li>结果为正，SF &#x3D; 0。</li><li>与有符号数的符号位规定一致</li><li>SF 标志，就是CPU对有符号数运算结果的一种记录 ，它记录数据的正负。</li><li>在我们将数据当作有符号数来运算的时候，可以通过它来得知结果的正负。</li><li>如果我们将数据当作无符号数来运算，SF的值则没有意义，虽然相关的指令影响了它的值。</li></ul></li><li><p>比如指令sub al,al执行后，ZF、PF、SF等标志位都要受到影响，它们分别为：1、1、0。</p></li><li><p>flag的第0位是<strong>CF，进位标志位。</strong></p><ul><li>一般情况下，在进行无符号数运算的时候，它记录了运算结果的最高有效位向更高位的进位值，或从更高位的借位值。</li><li>比如：<ul><li>mov al,98H</li><li>add al,al ;</li><li>执行后： (al)&#x3D;30H，CF&#x3D;1，CF记录了最高有效位向更高位的进位值</li></ul></li></ul></li><li><p>flag的第11位是<strong>OF，溢出标志位。</strong></p><ul><li>一般情况下，OF记录了有符号数运算的结果是否发生了溢出。</li><li>如果发生溢出，OF&#x3D;1，</li><li>如果没有，OF&#x3D;0。</li><li><strong>CF是对无符号数运算有意义的标志位；而OF是对有符号数运算有意义的标志位。</strong></li></ul></li><li><p>对于无符号数运算，CPU用CF位来记录是否产生了进位；对于有符号数运算，CPU 用 OF 位来记录是否产生了溢出。当然，还要用SF位来记录结果的符号。</p><ul><li>对于无符号数运算，98+99没有进位，CF&#x3D;0；</li><li>对于有符号数运算，98+99发生溢出，OF&#x3D;1。</li></ul></li><li><p><strong>adc是带进位加法指令 ，它利用了CF位上记录的进位值。</strong></p><ul><li>格式： adc 操作对象1,操作对象2</li><li>功能：操作对象1&#x3D;操作对象1+操作对象2+CF</li><li>比如：adc ax,bx 实现的功能是：(ax)&#x3D;(ax)+(bx)+CF</li></ul></li><li><p>下面的指令和add ax , bx具有相同的结果：add al,bl ，adc ah,bh，看来CPU提供 adc 指令的目的，就是来进行加法的第二步运算的。adc指令和add指令相配合就可以对更大的数据进行加法运算。</p></li><li><p><strong>sbb是带借位减法指令，它利用了CF位上记录的借位值。</strong></p><ul><li>格式：sbb 操作对象1,操作对象2</li><li>功能：操作对象1&#x3D;操作对象1–操作对象2–CF</li><li>比如：sbb ax,bx,实现功能： (ax) &#x3D; (ax) – (bx) – CF</li></ul></li><li><p><strong>cmp指令</strong></p><ul><li>格式：cmp 操作对象1,操作对象2</li><li>功能：计算操作对象1–操作对象2 但并不保存结果，仅仅根据计算结果对标志寄存器进行设置。</li></ul></li><li><p>比如：cmp ax,ax做(ax)–(ax)的运算，结果为0，但并不在ax中保存，仅影响flag的相关各位。指令执行后：</p><ul><li>ZF&#x3D;1，</li><li>PF&#x3D;1，0是偶数</li><li>SF&#x3D;0，</li><li>CF&#x3D;0，</li><li>OF&#x3D;0。</li><li>根据cmp指令执行后ZF的值，就可以知道两个数据是否相等。</li></ul></li><li><p>如果没有溢出发生的话，那么，实际结果的正负和逻辑上真正结果的正负就一致了。所以，我们应该在考察SF（得知实际结果的正负）的同时考察OF（得知有没有溢出），就可以得知逻辑上真正结果的正负，同时就可以知道比较的结果。</p></li><li><p>虽然 je 的逻辑含义是“相等则转移”，但它进行的操作是，ZF&#x3D;1时则转移。“相等则转移”这种逻辑含义，是通过和 cmp 指令配合使用来体现的，因为是cmp 指令为“ZF&#x3D;1”赋予了“两数相等”的含义。虽然我们分别讨论了cmp指令和与其比较结果相关的有条件转移指令，但是它们经常在一起配合使用。所以我们在联合应用它们的时候，不必再考虑cmp指令对相关标志位的影响和je 等指令对相关标志位的检测。我们可以直接考虑cmp和je等指令配合使用时，表现出来的逻辑含义。它们在联合使用的时候表现出来的功能有些像高级语言中的IF语句。<strong>意思就是说je可以直接用，je就是等于则转移</strong></p></li><li><p><strong>jb 含义是低于则转移，ja 含义是高于则转移。</strong></p></li><li><p><strong>jna 含义是不高于则转移，即小于等于则转移；jnb 含义是不低于则转移，即大于等于则转移。</strong></p></li></ol><p><a href="https://freeimage.host/i/HPSgh7e"><img src="https://iili.io/HPSgh7e.md.png" alt="HPSgh7e.md.png"></a></p><ol start="18"><li><p>flag的第10位是<strong>DF，方向标志位。</strong></p><ul><li>在串处理指令中，控制每次操作后si，di的增减。</li><li>DF &#x3D; 0：每次操作后si，di递增；</li><li>DF &#x3D; 1：每次操作后si，di递减。</li></ul></li><li><p>串传送指令：<code>movsb</code> 我们可以用汇编语法描述movsb的功能如下：</p><ul><li>mov es:[di],byte ptr ds:[si];8086 并不支持这样的指令，这里只是个描述。</li><li>如果DF&#x3D;0：inc si，inc di</li><li>如果DF&#x3D;1：dec si，dec di</li><li><strong>就是ds:si 传到 es:di</strong></li></ul></li><li><p>rep movsb 用汇编语法来描述rep movsb的功能就是：<br>  <code>s : movsb</code><br>  <code>loop s</code></p></li><li><p><strong>cld指令：将标志寄存器的DF位置0，std指令：将标志寄存器的DF位置1</strong></p></li><li><p>pushf ：将标志寄存器的值压栈；</p></li><li><p>popf ：从栈中弹出数据，送入标志寄存器中。</p></li><li><p>pushf和popf，为直接访问标志寄存<br>器提供了一种方法。</p></li></ol><h3 id="程序-1"><a href="#程序-1" class="headerlink" title="程序"></a>程序</h3><ol><li>编程计算1EF000H+201000H，结果放在ax（高16位）和bx（低16位）中。</li></ol><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">程序：<br> <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">001EH</span> <br> <span class="hljs-keyword">mov</span> <span class="hljs-built_in">bx</span>,<span class="hljs-number">0F000H</span> <br> <span class="hljs-keyword">add</span> <span class="hljs-built_in">bx</span>,<span class="hljs-number">1000H</span> <br> <span class="hljs-keyword">adc</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">0020H</span> <br> <span class="hljs-keyword">adc</span> 指令执行后，也可能产生进位值，所以也会对CF位进行设置<br></code></pre></td></tr></table></figure><ol start="2"><li>计算003E1000H–00202000H，结果放在ax，bx中。</li></ol><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">程序如下：<br> <span class="hljs-keyword">mov</span> <span class="hljs-built_in">bx</span>,<span class="hljs-number">1000H</span><br> <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">003EH</span><br> <span class="hljs-keyword">sub</span> <span class="hljs-built_in">bx</span>,<span class="hljs-number">2000H</span><br> <span class="hljs-keyword">sbb</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">0020H</span><br></code></pre></td></tr></table></figure><h2 id="第12章-内中断"><a href="#第12章-内中断" class="headerlink" title="第12章 内中断"></a>第12章 内中断</h2><hr><h3 id="基础概念-11"><a href="#基础概念-11" class="headerlink" title="基础概念"></a>基础概念</h3><ol><li><p>我们更简洁的描述中断过程，如下：</p><ul><li>（1）取得中断类型码N；</li><li>（2） pushf</li><li>（3） TF &#x3D; 0，IF &#x3D; 0</li><li>（4） push CS</li><li>（5） push IP</li><li>（6）(IP) &#x3D; (N * 4)，(CS) &#x3D; (N * 4+2)</li><li>在最后一步完成后，CPU 开始执行由程序员编写的中断处理程序。</li></ul></li><li><p>iret指令的功能用汇编语法描述为：</p><ol><li>pop IP</li><li>pop CS</li><li>popf</li></ol></li><li><p>CPU当然不能让这种情况发生，解决的办法就是，<strong>在进入中断处理程序之前，设置TF&#x3D;0</strong>。从而<strong>避免CPU在执行中断处理程序的时候发生单步中断</strong>。 这就是为什么在中断过程中有 TF&#x3D;0这个步骤。</p></li></ol><h2 id="第13章-int指令"><a href="#第13章-int指令" class="headerlink" title="第13章 int指令"></a>第13章 int指令</h2><hr><h3 id="程序-2"><a href="#程序-2" class="headerlink" title="程序"></a>程序</h3><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-comment">;编程：在屏幕的5行12列显示字符串“welcome to masm!”。</span><br><span class="hljs-meta">assume</span> <span class="hljs-built_in">cs</span>:code<br>data <span class="hljs-meta">segment</span> <br><span class="hljs-built_in">db</span> <span class="hljs-string">&#x27;Welcome to masm!&#x27;</span>,<span class="hljs-string">&#x27;$&#x27;</span><br>data ends<br>code <span class="hljs-meta">segment</span><br><span class="hljs-symbol">start:</span> <span class="hljs-keyword">mov</span> <span class="hljs-number">ah</span>,<span class="hljs-number">2</span> <span class="hljs-comment">;置光标</span><br><span class="hljs-keyword">mov</span> <span class="hljs-number">bh</span>,<span class="hljs-number">0</span> <span class="hljs-comment">;第0页</span><br><span class="hljs-keyword">mov</span> <span class="hljs-number">dh</span>,<span class="hljs-number">5</span> <span class="hljs-comment">;dh中放行号</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">dl</span>,<span class="hljs-number">12</span> <span class="hljs-comment">;dl中放列号</span><br><span class="hljs-keyword">int</span> <span class="hljs-number">10h</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,data<br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ds</span>,<span class="hljs-built_in">ax</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">dx</span>,<span class="hljs-number">0</span> <span class="hljs-comment">;ds:dx指向字符串的首地址data:0</span><br><span class="hljs-keyword">mov</span> <span class="hljs-number">ah</span>,<span class="hljs-number">9</span><br><span class="hljs-keyword">int</span> <span class="hljs-number">21h</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">4c00h</span><br><span class="hljs-keyword">int</span> <span class="hljs-number">21h</span> <br>code ends<br>end start<br></code></pre></td></tr></table></figure><h2 id="第14章-端口"><a href="#第14章-端口" class="headerlink" title="第14章 端口"></a>第14章 端口</h2><hr><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ol><li><p><strong>in al,60h;从60h号端口读入一个字节</strong></p><ul><li>执行时与总线相关的操作：</li><li>① CPU通过地址线将地址信息60h发出；</li><li>② CPU通过控制线发出端口读命令，选中端口所在的芯片，并通知它，将要从中读取数据；</li><li>③ 端口所在的芯片将60h端口中的数据通过数据线送入CPU。</li></ul></li><li><p>注意：在in和out 指令中，只能使用 ax 或al 来存放从端口中读入的数据或要发送到端口中的数据。访问8 位端口时用al ，访问16 位端口时用ax 。</p></li><li><p>对0～255以内的端口进行读写：</p><ul><li><strong>in al,20h          ;从20h端口读入一个字节</strong></li><li><strong>out 20h,al         ;往20h端口写入一个字节</strong></li></ul></li><li><p>对256～65535的端口进行读写时，端口号放在dx中：</p><ul><li>mov dx,3f8h  ;将端口号3f8送入dx</li><li>in al,dx  ;从3f8h端口读入一个字节</li><li>out dx,al  ;向3f8h端口写入一个字节</li></ul></li><li><p><strong>70h为地址端口</strong>，存放要访问的CMOS RAM单元的地址；<strong>71h为数据端口</strong>，存放从选定的CMOS RAM 单元中读取的数据，或要写入到其中的数据。</p></li><li><p>shl逻辑左移指令，功能为：</p><ul><li>将一个寄存器或内存单元中的数据向左移位；</li><li>将最后移出的一位写入CF中；</li><li>最低位用0补充。</li></ul></li><li><p>如果移动位数大于1时，必须将移动位数放在<strong>cl</strong>中。</p></li><li><p>shr逻辑右移指令</p></li></ol><h3 id="程序-3"><a href="#程序-3" class="headerlink" title="程序"></a>程序</h3><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-comment">;编程，读CMOS RAM的2号单元的内容</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>,<span class="hljs-number">2</span><br><span class="hljs-keyword">out</span> <span class="hljs-number">70h</span>,<span class="hljs-built_in">al</span>        <span class="hljs-comment">;将 2 送入端口 70h</span><br><span class="hljs-keyword">in</span> <span class="hljs-built_in">al</span>,<span class="hljs-number">71h</span>          <span class="hljs-comment">;从 71h 读出 2 号单元的内容</span><br><br><span class="hljs-comment">;编程，向CMOS RAM的2号单元写入0</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>,<span class="hljs-number">2</span><br><span class="hljs-keyword">out</span> <span class="hljs-number">70h</span>,<span class="hljs-built_in">al</span>        <span class="hljs-comment">;将 2 送入端口 70h</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>,<span class="hljs-number">0</span><br><span class="hljs-keyword">out</span> <span class="hljs-number">71h</span>,<span class="hljs-built_in">al</span>       <span class="hljs-comment">;向 2 号单元写入 0</span><br> <br><br></code></pre></td></tr></table></figure><h2 id="第15章-外中断"><a href="#第15章-外中断" class="headerlink" title="第15章 外中断"></a>第15章 外中断</h2><hr><h3 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h3><ol><li><p>外设的输入不直接送入内存和CPU ，而是送入相关的接口芯片的端口中； CPU 向外设的输出也不是直接送入外设，而是先送入端口中，再由相关的芯片送到外设。</p></li><li><p>可屏蔽中断是CPU 可以不响应的外中断。CPU 是否响应可屏蔽中断，要看标志寄存器的IF 位的设置。</p><ul><li>当CPU 检测到可屏蔽中断信息时：</li><li>如果IF&#x3D;1，则CPU 在执行完当前指令后响应中断，引发中断过程；</li><li>如果IF&#x3D;0，则不响应可屏蔽中断。</li></ul></li><li><p>内中断所引发的中断过程：</p><ul><li>（1）取中断类型码n；</li><li>（2）标志寄存器入栈，IF&#x3D;0，TF&#x3D;0；</li><li>（3）CS 、IP 入栈；</li><li>（4）(IP)&#x3D;(n* 4)，(CS)&#x3D;(n* 4+2)，</li><li>由此转去执行中断处理程序。</li></ul></li><li><p>将IF置0的原因就是，<strong>在进入中断处理程序后，禁止其他的可屏蔽中断。</strong></p></li><li><p> 不可屏蔽中断是CPU <strong>必须响应</strong>的外中断。当CPU 检测到不可屏蔽中断信息时，则在执行完当前指令后，立即响应，引发中断过程。 对于8086CPU 不可屏蔽中断的中断类型码固定为2。所以中断过程中，不需要取中断类型码。</p></li><li><p>不可屏蔽中断的中断过程：</p><ul><li>1、标志寄存器入栈，IF&#x3D;0，TF&#x3D;0；</li><li>2、CS、IP入栈；</li><li>3、(IP)&#x3D;(8)，(CS)&#x3D;(0AH)。</li></ul></li><li><p>一般将按下一个键时产生的扫描码称为通码，松开一个键产生的扫描码称为断码。</p></li><li><p> 扫描码长度为一个字节，通码的第7 位为 0 ，断码的第7位为1，即：断码&#x3D;通码＋80H</p></li></ol><h2 id="第16章-直接定址表"><a href="#第16章-直接定址表" class="headerlink" title="第16章 直接定址表"></a>第16章 直接定址表</h2><hr><h3 id="基本概念-2"><a href="#基本概念-2" class="headerlink" title="基本概念"></a>基本概念</h3><ol><li><p>对于程序中的a db 1,2,3,4,5,6,7,8 ：</p><ul><li>指令：mov al,a [si]，，相当于：mov al,cs:0[si]，</li><li>指令：mov al,a[3]，，相当于：mov al,cs:0[3]</li><li>指令：mov al,a[bx+si+3] ，，相当于：mov al,cs:0[bx+si+3]</li></ul></li><li><p>以后，我们将这种标号称为数据标号。它标记了存储数据的单元的地址和长度。它不同于仅仅表示地址的地址标号。</p></li></ol><hr><hr><hr><hr><hr><hr><hr><hr><hr><hr><hr><hr><hr><ul><li>\(E&#x3D;mc^2\)</li><li>(ax^2 + bx + c &#x3D; 0) </li><li>$ C_n^2$</li></ul>]]></content>
    
    
    <categories>
      
      <category>汇编</category>
      
    </categories>
    
    
    <tags>
      
      <tag>汇编</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
